WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 2, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=2, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=64, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=64, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 64
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 128
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 3710
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 2, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=2, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=64, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=64, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 64
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 128
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 3710
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 2, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=2, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=48, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=48, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 48
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 96
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 4935
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 2, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=2, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=32, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=32, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 32
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 64
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 7385
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=1, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=32, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=32, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 32
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 32
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 14770
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=1, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=64, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=64, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 64
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 64
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 7385
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=1, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=48, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=48, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 48
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 48
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 9835
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0002, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=1, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=32, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=32, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 32
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 32
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 14770
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5930646117368109
INFO:__main__:  auc = 0.6361796786464855
INFO:__main__:  f1 = 0.5927417422874375
INFO:__main__:  mcc = 0.185488592629806
INFO:__main__:  precision = 0.5927551410862049
INFO:__main__:  recall = 0.5927334528115531
INFO:__main__:{"eval_acc": 0.5930646117368109, "eval_f1": 0.5927417422874375, "eval_mcc": 0.185488592629806, "eval_auc": 0.6361796786464855, "eval_precision": 0.5927551410862049, "eval_recall": 0.5927334528115531, "learning_rate": 1.3540961408259987e-05, "loss": 0.6997184193134308, "step": 100}
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 200 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal 800 normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 200 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal 800 normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 100 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal 900 normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal 900 normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/data3/linming/.conda/envs/dnabert/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 200 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal 800 normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 200 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal 800 normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 100 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal 900 normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal 900 normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/data3/linming/.conda/envs/dnabert/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6591582691167753
INFO:__main__:  auc = 0.719451215931742
INFO:__main__:  f1 = 0.6431790091667526
INFO:__main__:  mcc = 0.3695526401610846
INFO:__main__:  precision = 0.7067599129173353
INFO:__main__:  recall = 0.6651301162820544
INFO:__main__:{"eval_acc": 0.6591582691167753, "eval_f1": 0.6431790091667526, "eval_mcc": 0.3695526401610846, "eval_auc": 0.719451215931742, "eval_precision": 0.7067599129173353, "eval_recall": 0.6651301162820544, "learning_rate": 2.7081922816519974e-05, "loss": 0.6437983557581901, "step": 200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6677534084173088
INFO:__main__:  auc = 0.7320291290572227
INFO:__main__:  f1 = 0.6548240574213
INFO:__main__:  mcc = 0.3803846620882602
INFO:__main__:  precision = 0.7087803369263102
INFO:__main__:  recall = 0.6732592413660461
INFO:__main__:{"eval_acc": 0.6677534084173088, "eval_f1": 0.6548240574213, "eval_mcc": 0.3803846620882602, "eval_auc": 0.7320291290572227, "eval_precision": 0.7087803369263102, "eval_recall": 0.6732592413660461, "learning_rate": 4.062288422477996e-05, "loss": 0.618776219189167, "step": 300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6745702430349734
INFO:__main__:  auc = 0.7409420003213746
INFO:__main__:  f1 = 0.6632732082452277
INFO:__main__:  mcc = 0.3908477792166378
INFO:__main__:  precision = 0.7123936496069943
INFO:__main__:  recall = 0.6798099740755469
INFO:__main__:{"eval_acc": 0.6745702430349734, "eval_f1": 0.6632732082452277, "eval_mcc": 0.3908477792166378, "eval_auc": 0.7409420003213746, "eval_precision": 0.7123936496069943, "eval_recall": 0.6798099740755469, "learning_rate": 5.416384563303995e-05, "loss": 0.6159404221177102, "step": 400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6704208654416123
INFO:__main__:  auc = 0.7353045833153131
INFO:__main__:  f1 = 0.6673914770245046
INFO:__main__:  mcc = 0.3550753563206536
INFO:__main__:  precision = 0.6818075724563267
INFO:__main__:  recall = 0.6733680657010661
INFO:__main__:{"eval_acc": 0.6704208654416123, "eval_f1": 0.6673914770245046, "eval_mcc": 0.3550753563206536, "eval_auc": 0.7353045833153131, "eval_precision": 0.6818075724563267, "eval_recall": 0.6733680657010661, "learning_rate": 6.770480704129993e-05, "loss": 0.6126783657073974, "step": 500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6612329579134558
INFO:__main__:  auc = 0.7377709752313001
INFO:__main__:  f1 = 0.6595815335824187
INFO:__main__:  mcc = 0.3216901382041677
INFO:__main__:  precision = 0.6618309101160069
INFO:__main__:  recall = 0.6598652336312554
INFO:__main__:{"eval_acc": 0.6612329579134558, "eval_f1": 0.6595815335824187, "eval_mcc": 0.3216901382041677, "eval_auc": 0.7377709752313001, "eval_precision": 0.6618309101160069, "eval_recall": 0.6598652336312554, "learning_rate": 8.124576844955992e-05, "loss": 0.6134432777762413, "step": 600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6799051570835803
INFO:__main__:  auc = 0.755747911504543
INFO:__main__:  f1 = 0.6792016700191004
INFO:__main__:  mcc = 0.3589902613493214
INFO:__main__:  precision = 0.6798451661911356
INFO:__main__:  recall = 0.6791457764378964
INFO:__main__:{"eval_acc": 0.6799051570835803, "eval_f1": 0.6792016700191004, "eval_mcc": 0.3589902613493214, "eval_auc": 0.755747911504543, "eval_precision": 0.6798451661911356, "eval_recall": 0.6791457764378964, "learning_rate": 9.478672985781992e-05, "loss": 0.6049994996190071, "step": 700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6393005334914048
INFO:__main__:  auc = 0.71042952033257
INFO:__main__:  f1 = 0.6384773491354737
INFO:__main__:  mcc = 0.27755470446200325
INFO:__main__:  precision = 0.6390649935740816
INFO:__main__:  recall = 0.6384903058438491
INFO:__main__:{"eval_acc": 0.6393005334914048, "eval_f1": 0.6384773491354737, "eval_mcc": 0.27755470446200325, "eval_auc": 0.71042952033257, "eval_precision": 0.6390649935740816, "eval_recall": 0.6384903058438491, "learning_rate": 0.0001083276912660799, "loss": 0.6017259922623635, "step": 800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6923532898636633
INFO:__main__:  auc = 0.7532257888709448
INFO:__main__:  f1 = 0.6916598962729907
INFO:__main__:  mcc = 0.39086076578398193
INFO:__main__:  precision = 0.6968081407725775
INFO:__main__:  recall = 0.6940622700228865
INFO:__main__:{"eval_acc": 0.6923532898636633, "eval_f1": 0.6916598962729907, "eval_mcc": 0.39086076578398193, "eval_auc": 0.7532257888709448, "eval_precision": 0.6968081407725775, "eval_recall": 0.6940622700228865, "learning_rate": 0.00012186865267433989, "loss": 0.5984204789996147, "step": 900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6950207468879668
INFO:__main__:  auc = 0.7586044184438087
INFO:__main__:  f1 = 0.6930988464442307
INFO:__main__:  mcc = 0.40187195604525733
INFO:__main__:  precision = 0.7043704314779896
INFO:__main__:  recall = 0.6975592406979807
INFO:__main__:{"eval_acc": 0.6950207468879668, "eval_f1": 0.6930988464442307, "eval_mcc": 0.40187195604525733, "eval_auc": 0.7586044184438087, "eval_precision": 0.7043704314779896, "eval_recall": 0.6975592406979807, "learning_rate": 0.00013540961408259986, "loss": 0.5679184883832932, "step": 1000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6867219917012448
INFO:__main__:  auc = 0.7594876712049402
INFO:__main__:  f1 = 0.6765968104914756
INFO:__main__:  mcc = 0.41457745161060305
INFO:__main__:  precision = 0.7240194194213926
INFO:__main__:  recall = 0.6918075493498141
INFO:__main__:{"eval_acc": 0.6867219917012448, "eval_f1": 0.6765968104914756, "eval_mcc": 0.41457745161060305, "eval_auc": 0.7594876712049402, "eval_precision": 0.7240194194213926, "eval_recall": 0.6918075493498141, "learning_rate": 0.00014895057549085987, "loss": 0.596424957215786, "step": 1100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6899822169531713
INFO:__main__:  auc = 0.7663261994498658
INFO:__main__:  f1 = 0.686763862183356
INFO:__main__:  mcc = 0.3965843159358524
INFO:__main__:  precision = 0.7036266214011041
INFO:__main__:  recall = 0.6930974429621597
INFO:__main__:{"eval_acc": 0.6899822169531713, "eval_f1": 0.686763862183356, "eval_mcc": 0.3965843159358524, "eval_auc": 0.7663261994498658, "eval_precision": 0.7036266214011041, "eval_recall": 0.6930974429621597, "learning_rate": 0.00016249153689911985, "loss": 0.5803292551636696, "step": 1200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6962062833432128
INFO:__main__:  auc = 0.7665983481907558
INFO:__main__:  f1 = 0.6896881088906843
INFO:__main__:  mcc = 0.42242717622374115
INFO:__main__:  precision = 0.7225408684247505
INFO:__main__:  recall = 0.7004628638275294
INFO:__main__:{"eval_acc": 0.6962062833432128, "eval_f1": 0.6896881088906843, "eval_mcc": 0.42242717622374115, "eval_auc": 0.7665983481907558, "eval_precision": 0.7225408684247505, "eval_recall": 0.7004628638275294, "learning_rate": 0.00017603249830737983, "loss": 0.5896021988987923, "step": 1300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.486959098992294
INFO:__main__:  auc = 0.4430207033462692
INFO:__main__:  f1 = 0.3274865457444688
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.243479549496147
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.486959098992294, "eval_f1": 0.3274865457444688, "eval_mcc": 0.0, "eval_auc": 0.4430207033462692, "eval_precision": 0.243479549496147, "eval_recall": 0.5, "learning_rate": 0.00018957345971563983, "loss": 0.5996572309732437, "step": 1400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5689969138895364
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5689969138895364, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.0001996539532084556, "loss": 0.7063533252477646, "step": 1500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.486959098992294
INFO:__main__:  auc = 0.4786208528522701
INFO:__main__:  f1 = 0.3274865457444688
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.243479549496147
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.486959098992294, "eval_f1": 0.3274865457444688, "eval_mcc": 0.0, "eval_auc": 0.4786208528522701, "eval_precision": 0.243479549496147, "eval_recall": 0.5, "learning_rate": 0.00019814940194087116, "loss": 0.7029492688179017, "step": 1600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5202662908623071
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5202662908623071, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00019664485067328672, "loss": 0.6985727727413178, "step": 1700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5041525537854167
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5041525537854167, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00019514029940570228, "loss": 0.6983185940980912, "step": 1800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.49950774129554754
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.49950774129554754, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00019363574813811783, "loss": 0.6987719529867172, "step": 1900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.486959098992294
INFO:__main__:  auc = 0.47023399517516146
INFO:__main__:  f1 = 0.3274865457444688
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.243479549496147
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.486959098992294, "eval_f1": 0.3274865457444688, "eval_mcc": 0.0, "eval_auc": 0.47023399517516146, "eval_precision": 0.243479549496147, "eval_recall": 0.5, "learning_rate": 0.0001921311968705334, "loss": 0.6967081493139267, "step": 2000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5214201101042076
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5214201101042076, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00019062664560294895, "loss": 0.6960550725460053, "step": 2100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5080419249706315
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5080419249706315, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.0001891220943353645, "loss": 0.6955685073137283, "step": 2200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5002118470495946
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5002118470495946, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00018761754306778004, "loss": 0.6945447057485581, "step": 2300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.486959098992294
INFO:__main__:  auc = 0.5141626345404572
INFO:__main__:  f1 = 0.3274865457444688
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.243479549496147
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.486959098992294, "eval_f1": 0.3274865457444688, "eval_mcc": 0.0, "eval_auc": 0.5141626345404572, "eval_precision": 0.243479549496147, "eval_recall": 0.5, "learning_rate": 0.0001861129918001956, "loss": 0.6940339070558548, "step": 2400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.49826742516700756
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.49826742516700756, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.00018460844053261115, "loss": 0.6953548908233642, "step": 2500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5130409010077059
INFO:__main__:  auc = 0.5347824726365693
INFO:__main__:  f1 = 0.3390793339862879
INFO:__main__:  mcc = 0.0
INFO:__main__:  precision = 0.25652045050385297
INFO:__main__:  recall = 0.5
INFO:__main__:{"eval_acc": 0.5130409010077059, "eval_f1": 0.3390793339862879, "eval_mcc": 0.0, "eval_auc": 0.5347824726365693, "eval_precision": 0.25652045050385297, "eval_recall": 0.5, "learning_rate": 0.0001831038892650267, "loss": 0.6949070852994919, "step": 2600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
WARNING:__main__:Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, 16-bits training: False
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForMaskedLM"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 1,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 10,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): raw.githubusercontent.com:443
DEBUG:urllib3.connectionpool:https://raw.githubusercontent.com:443 "HEAD /jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt HTTP/1.1" 200 0
INFO:transformers.tokenization_utils:loading file https://raw.githubusercontent.com/jerryji1993/DNABERT/master/src/transformers/dnabert-config/bert-config-6/vocab.txt from cache at /data3/linming/.cache/torch/transformers/ea1474aad40c1c8ed4e1cb7c11345ddda6df27a857fb29e1d4c901d9b900d32d.26f8bd5a32e49c2a8271a46950754a4a767726709b7741c68723bc1db840a87e
INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/pytorch_model.bin
INFO:transformers.modeling_utils:Weights of BertForSequenceClassification_textCNN not initialized from pretrained model: ['classifier.weight', 'classifier.bias', 'textcnn.convs.0.weight', 'textcnn.convs.0.bias', 'textcnn.convs.1.weight', 'textcnn.convs.1.bias', 'textcnn.convs.2.weight', 'textcnn.convs.2.bias', 'textcnn.convs.3.weight', 'textcnn.convs.3.bias', 'textcnn.convs.4.weight', 'textcnn.convs.4.bias', 'textcnn.fc.0.weight', 'textcnn.fc.0.bias', 'fc.0.weight', 'fc.0.bias', 'fc.3.weight', 'fc.3.bias']
INFO:transformers.modeling_utils:Weights from pretrained model not used in BertForSequenceClassification_textCNN: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.weight', 'cls.predictions.decoder.bias']
INFO:__main__:finish loading model
INFO:__main__:Training/evaluation parameters Namespace(adam_epsilon=1e-08, attention_probs_dropout_prob=0.1, beta1=0.9, beta2=0.999, cache_dir='', config_name='', data_dir='/data3/linming/DNABERT/examples/data/fold_100/1/after/', device=device(type='cuda'), do_ensemble_pred=False, do_eval=True, do_lower_case=False, do_predict=False, do_train=True, do_visualize=False, early_stop=0, eval_all_checkpoints=False, evaluate_during_training=True, filter_num=128, filter_size=[2, 3, 4, 5, 6], fp16=False, fp16_opt_level='O1', gradient_accumulation_steps=1, hidden_dropout_prob=0.1, learning_rate=0.0001, local_rank=-1, logging_steps=100, max_grad_norm=1.0, max_seq_length=300, max_steps=-1, model_name='mutant_textCNNBert_fold_100_1', model_name_or_path='/data3/linming/DNABERT/examples/embeding_model/6-new-12w-0/', model_type='dna', n_gpu=1, n_process=8, no_cuda=False, num_rnn_layer=2, num_train_epochs=35.0, output_dir='/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/', output_mode='classification', overwrite_cache=False, overwrite_output_dir=True, per_gpu_eval_batch_size=32, per_gpu_pred_batch_size=8, per_gpu_train_batch_size=32, predict_dir=None, predict_scan_size=1, result_dir=None, rnn='lstm', rnn_dropout=0.0, rnn_hidden=768, save_steps=4000, save_total_limit=None, seed=42, server_ip='', server_port='', should_continue=False, task_name='dnaprom', tokenizer_name='dna6', visualize_data_dir=None, visualize_models=None, visualize_train=False, warmup_percent=0.1, warmup_steps=0, weight_decay=0.01)
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_train_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running training *****
INFO:__main__:  Num examples = 13486
INFO:__main__:  Num Epochs = 35
INFO:__main__:  Instantaneous batch size per GPU = 32
INFO:__main__:  Total train batch size (w. parallel, distributed & accumulation) = 32
INFO:__main__:  Gradient Accumulation steps = 1
INFO:__main__:  Total optimization steps = 14770
INFO:__main__:  Continuing training from checkpoint, will skip to saved global_step
INFO:__main__:  Continuing training from epoch 0
INFO:__main__:  Continuing training from global step 0
INFO:__main__:  Will skip the first 0 steps in the first epoch
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.5634262003556609
INFO:__main__:  auc = 0.6001238382255059
INFO:__main__:  f1 = 0.5634123554982797
INFO:__main__:  mcc = 0.12729619064225217
INFO:__main__:  precision = 0.563633430615068
INFO:__main__:  recall = 0.5636627634067537
INFO:__main__:{"eval_acc": 0.5634262003556609, "eval_f1": 0.5634123554982797, "eval_mcc": 0.12729619064225217, "eval_auc": 0.6001238382255059, "eval_precision": 0.563633430615068, "eval_recall": 0.5636627634067537, "learning_rate": 6.770480704129993e-06, "loss": 0.7030735886096955, "step": 100}
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 200 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal 800 normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 200 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal 800 normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 100 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal 900 normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal 900 normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/data3/linming/.conda/envs/dnabert/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 200 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal 300 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal 600 normal>) = 11.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal 800 normal>) = 11.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 200 normal>) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal 800 normal>) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 100 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 100 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal 900 normal>) = 11.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal 900 normal>) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/data3/linming/.conda/envs/dnabert/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6345583876704208
INFO:__main__:  auc = 0.6965446603467682
INFO:__main__:  f1 = 0.6335950837184637
INFO:__main__:  mcc = 0.2679979481837238
INFO:__main__:  precision = 0.6343467424066775
INFO:__main__:  recall = 0.6336521060058022
INFO:__main__:{"eval_acc": 0.6345583876704208, "eval_f1": 0.6335950837184637, "eval_mcc": 0.2679979481837238, "eval_auc": 0.6965446603467682, "eval_precision": 0.6343467424066775, "eval_recall": 0.6336521060058022, "learning_rate": 1.3540961408259987e-05, "loss": 0.6664117705821991, "step": 200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6704208654416123
INFO:__main__:  auc = 0.7299335134296966
INFO:__main__:  f1 = 0.6600249950705777
INFO:__main__:  mcc = 0.3785097669920468
INFO:__main__:  precision = 0.704156238121483
INFO:__main__:  recall = 0.6754411780735315
INFO:__main__:{"eval_acc": 0.6704208654416123, "eval_f1": 0.6600249950705777, "eval_mcc": 0.3785097669920468, "eval_auc": 0.7299335134296966, "eval_precision": 0.704156238121483, "eval_recall": 0.6754411780735315, "learning_rate": 2.031144211238998e-05, "loss": 0.6207369965314865, "step": 300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6828689982216953
INFO:__main__:  auc = 0.7369009079711804
INFO:__main__:  f1 = 0.6759790956803078
INFO:__main__:  mcc = 0.39459889198568626
INFO:__main__:  precision = 0.7080107540119429
INFO:__main__:  recall = 0.6871397061848439
INFO:__main__:{"eval_acc": 0.6828689982216953, "eval_f1": 0.6759790956803078, "eval_mcc": 0.39459889198568626, "eval_auc": 0.7369009079711804, "eval_precision": 0.7080107540119429, "eval_recall": 0.6871397061848439, "learning_rate": 2.7081922816519974e-05, "loss": 0.6148389047384262, "step": 400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6840545346769413
INFO:__main__:  auc = 0.7456444774023367
INFO:__main__:  f1 = 0.6795048275429432
INFO:__main__:  mcc = 0.38897163847069444
INFO:__main__:  precision = 0.7015922990586134
INFO:__main__:  recall = 0.6876298552091344
INFO:__main__:{"eval_acc": 0.6840545346769413, "eval_f1": 0.6795048275429432, "eval_mcc": 0.38897163847069444, "eval_auc": 0.7456444774023367, "eval_precision": 0.7015922990586134, "eval_recall": 0.6876298552091344, "learning_rate": 3.3852403520649966e-05, "loss": 0.6082065308094025, "step": 500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6123295791345584
INFO:__main__:  auc = 0.7275425425794988
INFO:__main__:  f1 = 0.5956126847290641
INFO:__main__:  mcc = 0.23228429364509587
INFO:__main__:  precision = 0.6255492942121492
INFO:__main__:  recall = 0.6074398574137501
INFO:__main__:{"eval_acc": 0.6123295791345584, "eval_f1": 0.5956126847290641, "eval_mcc": 0.23228429364509587, "eval_auc": 0.7275425425794988, "eval_precision": 0.6255492942121492, "eval_recall": 0.6074398574137501, "learning_rate": 4.062288422477996e-05, "loss": 0.6053395783901214, "step": 600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6793123888559573
INFO:__main__:  auc = 0.7362778490966877
INFO:__main__:  f1 = 0.671933816445959
INFO:__main__:  mcc = 0.3884786646028806
INFO:__main__:  precision = 0.7053956623807878
INFO:__main__:  recall = 0.6836889726666322
INFO:__main__:{"eval_acc": 0.6793123888559573, "eval_f1": 0.671933816445959, "eval_mcc": 0.3884786646028806, "eval_auc": 0.7362778490966877, "eval_precision": 0.7053956623807878, "eval_recall": 0.6836889726666322, "learning_rate": 4.739336492890996e-05, "loss": 0.5993268871307373, "step": 700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6846473029045643
INFO:__main__:  auc = 0.739208194841621
INFO:__main__:  f1 = 0.681997326249631
INFO:__main__:  mcc = 0.3833008823626974
INFO:__main__:  precision = 0.6958970487479175
INFO:__main__:  recall = 0.6874958905188513
INFO:__main__:{"eval_acc": 0.6846473029045643, "eval_f1": 0.681997326249631, "eval_mcc": 0.3833008823626974, "eval_auc": 0.739208194841621, "eval_precision": 0.6958970487479175, "eval_recall": 0.6874958905188513, "learning_rate": 5.416384563303995e-05, "loss": 0.5900101128220558, "step": 800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6843509187907528
INFO:__main__:  auc = 0.7474255748790537
INFO:__main__:  f1 = 0.6810934365319307
INFO:__main__:  mcc = 0.3849399540231086
INFO:__main__:  precision = 0.6976195665711795
INFO:__main__:  recall = 0.6874545759490132
INFO:__main__:{"eval_acc": 0.6843509187907528, "eval_f1": 0.6810934365319307, "eval_mcc": 0.3849399540231086, "eval_auc": 0.7474255748790537, "eval_precision": 0.6976195665711795, "eval_recall": 0.6874545759490132, "learning_rate": 6.093432633716994e-05, "loss": 0.5874319332838058, "step": 900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6932424422050978
INFO:__main__:  auc = 0.7605808371421852
INFO:__main__:  f1 = 0.6855714227445395
INFO:__main__:  mcc = 0.4202518850937527
INFO:__main__:  precision = 0.7232301875291675
INFO:__main__:  recall = 0.6977909539024336
INFO:__main__:{"eval_acc": 0.6932424422050978, "eval_f1": 0.6855714227445395, "eval_mcc": 0.4202518850937527, "eval_auc": 0.7605808371421852, "eval_precision": 0.7232301875291675, "eval_recall": 0.6977909539024336, "learning_rate": 6.770480704129993e-05, "loss": 0.561369885802269, "step": 1000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6965026674570243
INFO:__main__:  auc = 0.7659380183000688
INFO:__main__:  f1 = 0.6894061872515231
INFO:__main__:  mcc = 0.4252934497032365
INFO:__main__:  precision = 0.7250557589778551
INFO:__main__:  recall = 0.7009218950694314
INFO:__main__:{"eval_acc": 0.6965026674570243, "eval_f1": 0.6894061872515231, "eval_mcc": 0.4252934497032365, "eval_auc": 0.7659380183000688, "eval_precision": 0.7250557589778551, "eval_recall": 0.7009218950694314, "learning_rate": 7.447528774542994e-05, "loss": 0.5839642655849456, "step": 1100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7104327208061648
INFO:__main__:  auc = 0.7725764785429705
INFO:__main__:  f1 = 0.7076870184811545
INFO:__main__:  mcc = 0.43745598972497973
INFO:__main__:  precision = 0.7241408721543329
INFO:__main__:  recall = 0.7134458355441022
INFO:__main__:{"eval_acc": 0.7104327208061648, "eval_f1": 0.7076870184811545, "eval_mcc": 0.43745598972497973, "eval_auc": 0.7725764785429705, "eval_precision": 0.7241408721543329, "eval_recall": 0.7134458355441022, "learning_rate": 8.124576844955992e-05, "loss": 0.5711446872353554, "step": 1200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6932424422050978
INFO:__main__:  auc = 0.7663145962089751
INFO:__main__:  f1 = 0.6868786995579024
INFO:__main__:  mcc = 0.4153613636672099
INFO:__main__:  precision = 0.7184579184731694
INFO:__main__:  recall = 0.6974351211817865
INFO:__main__:{"eval_acc": 0.6932424422050978, "eval_f1": 0.6868786995579024, "eval_mcc": 0.4153613636672099, "eval_auc": 0.7663145962089751, "eval_precision": 0.7184579184731694, "eval_recall": 0.6974351211817865, "learning_rate": 8.801624915368991e-05, "loss": 0.5781931871175766, "step": 1300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6932424422050978
INFO:__main__:  auc = 0.7678826159893363
INFO:__main__:  f1 = 0.6836002321292423
INFO:__main__:  mcc = 0.42765271611115335
INFO:__main__:  precision = 0.7306026303736177
INFO:__main__:  recall = 0.6982705545259145
INFO:__main__:{"eval_acc": 0.6932424422050978, "eval_f1": 0.6836002321292423, "eval_mcc": 0.42765271611115335, "eval_auc": 0.7678826159893363, "eval_precision": 0.7306026303736177, "eval_recall": 0.6982705545259145, "learning_rate": 9.478672985781992e-05, "loss": 0.5210236731171608, "step": 1400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6970954356846473
INFO:__main__:  auc = 0.7650707639468317
INFO:__main__:  f1 = 0.6963604407061443
INFO:__main__:  mcc = 0.40068940023643934
INFO:__main__:  precision = 0.7018465174496025
INFO:__main__:  recall = 0.6988540568973707
INFO:__main__:{"eval_acc": 0.6970954356846473, "eval_f1": 0.6963604407061443, "eval_mcc": 0.40068940023643934, "eval_auc": 0.7650707639468317, "eval_precision": 0.7018465174496025, "eval_recall": 0.6988540568973707, "learning_rate": 9.98269766042278e-05, "loss": 0.5355473017692566, "step": 1500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6988737403675163
INFO:__main__:  auc = 0.7710933733891272
INFO:__main__:  f1 = 0.6975165890159538
INFO:__main__:  mcc = 0.40730906956672047
INFO:__main__:  precision = 0.7062438763694665
INFO:__main__:  recall = 0.701097701749593
INFO:__main__:{"eval_acc": 0.6988737403675163, "eval_f1": 0.6975165890159538, "eval_mcc": 0.40730906956672047, "eval_auc": 0.7710933733891272, "eval_precision": 0.7062438763694665, "eval_recall": 0.701097701749593, "learning_rate": 9.907470097043558e-05, "loss": 0.5292199268937111, "step": 1600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7080616478956728
INFO:__main__:  auc = 0.7776448093253489
INFO:__main__:  f1 = 0.7053950350306516
INFO:__main__:  mcc = 0.4321458894906983
INFO:__main__:  precision = 0.7212398221136974
INFO:__main__:  recall = 0.7110267356250789
INFO:__main__:{"eval_acc": 0.7080616478956728, "eval_f1": 0.7053950350306516, "eval_mcc": 0.4321458894906983, "eval_auc": 0.7776448093253489, "eval_precision": 0.7212398221136974, "eval_recall": 0.7110267356250789, "learning_rate": 9.832242533664336e-05, "loss": 0.5090503992140293, "step": 1700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7163604030823948
INFO:__main__:  auc = 0.7861593026522548
INFO:__main__:  f1 = 0.7145186723587554
INFO:__main__:  mcc = 0.44557620656041663
INFO:__main__:  precision = 0.7266993210870762
INFO:__main__:  recall = 0.7189443652728362
INFO:__main__:{"eval_acc": 0.7163604030823948, "eval_f1": 0.7145186723587554, "eval_mcc": 0.44557620656041663, "eval_auc": 0.7861593026522548, "eval_precision": 0.7266993210870762, "eval_recall": 0.7189443652728362, "learning_rate": 9.757014970285114e-05, "loss": 0.4417183105647564, "step": 1800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7086544161232958
INFO:__main__:  auc = 0.7817064710571222
INFO:__main__:  f1 = 0.7085591540712759
INFO:__main__:  mcc = 0.41988883807482624
INFO:__main__:  precision = 0.7102806969026549
INFO:__main__:  recall = 0.7096086789428955
INFO:__main__:{"eval_acc": 0.7086544161232958, "eval_f1": 0.7085591540712759, "eval_mcc": 0.41988883807482624, "eval_auc": 0.7817064710571222, "eval_precision": 0.7102806969026549, "eval_recall": 0.7096086789428955, "learning_rate": 9.681787406905892e-05, "loss": 0.4259647092223167, "step": 1900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7003556609365738
INFO:__main__:  auc = 0.7758941264042998
INFO:__main__:  f1 = 0.6992453877237499
INFO:__main__:  mcc = 0.40918030315080706
INFO:__main__:  precision = 0.706785422820952
INFO:__main__:  recall = 0.7024181857242866
INFO:__main__:{"eval_acc": 0.7003556609365738, "eval_f1": 0.6992453877237499, "eval_mcc": 0.40918030315080706, "eval_auc": 0.7758941264042998, "eval_precision": 0.706785422820952, "eval_recall": 0.7024181857242866, "learning_rate": 9.60655984352667e-05, "loss": 0.4499156339466572, "step": 2000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7068761114404268
INFO:__main__:  auc = 0.7838532464285751
INFO:__main__:  f1 = 0.706569867468285
INFO:__main__:  mcc = 0.417981846520066
INFO:__main__:  precision = 0.7097843801371804
INFO:__main__:  recall = 0.7082004674348013
INFO:__main__:{"eval_acc": 0.7068761114404268, "eval_f1": 0.706569867468285, "eval_mcc": 0.417981846520066, "eval_auc": 0.7838532464285751, "eval_precision": 0.7097843801371804, "eval_recall": 0.7082004674348013, "learning_rate": 9.531332280147448e-05, "loss": 0.4433338764309883, "step": 2100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6849436870183758
INFO:__main__:  auc = 0.7682864439336674
INFO:__main__:  f1 = 0.6820296063308215
INFO:__main__:  mcc = 0.3708044631561066
INFO:__main__:  precision = 0.6879270033755664
INFO:__main__:  recall = 0.6829113797202775
INFO:__main__:{"eval_acc": 0.6849436870183758, "eval_f1": 0.6820296063308215, "eval_mcc": 0.3708044631561066, "eval_auc": 0.7682864439336674, "eval_precision": 0.6879270033755664, "eval_recall": 0.6829113797202775, "learning_rate": 9.456104716768225e-05, "loss": 0.3289541759341955, "step": 2200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6991701244813278
INFO:__main__:  auc = 0.7705717549690878
INFO:__main__:  f1 = 0.6982029796266016
INFO:__main__:  mcc = 0.4060693660455891
INFO:__main__:  precision = 0.7049639809312498
INFO:__main__:  recall = 0.7011235453315767
INFO:__main__:{"eval_acc": 0.6991701244813278, "eval_f1": 0.6982029796266016, "eval_mcc": 0.4060693660455891, "eval_auc": 0.7705717549690878, "eval_precision": 0.7049639809312498, "eval_recall": 0.7011235453315767, "learning_rate": 9.380877153389002e-05, "loss": 0.33394959062337876, "step": 2300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6959098992294013
INFO:__main__:  auc = 0.7770859198891154
INFO:__main__:  f1 = 0.6902520951257791
INFO:__main__:  mcc = 0.41848921137956957
INFO:__main__:  precision = 0.7190139789804886
INFO:__main__:  recall = 0.6999110066585021
INFO:__main__:{"eval_acc": 0.6959098992294013, "eval_f1": 0.6902520951257791, "eval_mcc": 0.41848921137956957, "eval_auc": 0.7770859198891154, "eval_precision": 0.7190139789804886, "eval_recall": 0.6999110066585021, "learning_rate": 9.30564959000978e-05, "loss": 0.34010727450251577, "step": 2400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6985773562537048
INFO:__main__:  auc = 0.7780913582929594
INFO:__main__:  f1 = 0.6925346951075106
INFO:__main__:  mcc = 0.42577247168252497
INFO:__main__:  precision = 0.7235713620922333
INFO:__main__:  recall = 0.7027117828801565
INFO:__main__:{"eval_acc": 0.6985773562537048, "eval_f1": 0.6925346951075106, "eval_mcc": 0.42577247168252497, "eval_auc": 0.7780913582929594, "eval_precision": 0.7235713620922333, "eval_recall": 0.7027117828801565, "learning_rate": 9.230422026630558e-05, "loss": 0.36518696069717405, "step": 2500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7119146413752223
INFO:__main__:  auc = 0.773375519904305
INFO:__main__:  f1 = 0.7109787140438381
INFO:__main__:  mcc = 0.43187018369359803
INFO:__main__:  precision = 0.7180053708006349
INFO:__main__:  recall = 0.7138844732111055
INFO:__main__:{"eval_acc": 0.7119146413752223, "eval_f1": 0.7109787140438381, "eval_mcc": 0.43187018369359803, "eval_auc": 0.773375519904305, "eval_precision": 0.7180053708006349, "eval_recall": 0.7138844732111055, "learning_rate": 9.155194463251336e-05, "loss": 0.2673496142029762, "step": 2600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7009484291641968
INFO:__main__:  auc = 0.7727580868435774
INFO:__main__:  f1 = 0.6966637040205113
INFO:__main__:  mcc = 0.42393049030438407
INFO:__main__:  precision = 0.7196734523086591
INFO:__main__:  recall = 0.7045275142728653
INFO:__main__:{"eval_acc": 0.7009484291641968, "eval_f1": 0.6966637040205113, "eval_mcc": 0.42393049030438407, "eval_auc": 0.7727580868435774, "eval_precision": 0.7196734523086591, "eval_recall": 0.7045275142728653, "learning_rate": 9.079966899872114e-05, "loss": 0.24033524628728628, "step": 2700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6834617664493183
INFO:__main__:  auc = 0.7529733304782329
INFO:__main__:  f1 = 0.6762374369488924
INFO:__main__:  mcc = 0.374110459810123
INFO:__main__:  precision = 0.6943564094475755
INFO:__main__:  recall = 0.6800283259723077
INFO:__main__:{"eval_acc": 0.6834617664493183, "eval_f1": 0.6762374369488924, "eval_mcc": 0.374110459810123, "eval_auc": 0.7529733304782329, "eval_precision": 0.6943564094475755, "eval_recall": 0.6800283259723077, "learning_rate": 9.004739336492891e-05, "loss": 0.23536971420049668, "step": 2800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7154712507409603
INFO:__main__:  auc = 0.7837481140338386
INFO:__main__:  f1 = 0.7143647281921619
INFO:__main__:  mcc = 0.44003365617843615
INFO:__main__:  precision = 0.7224781436177422
INFO:__main__:  recall = 0.7175827425349847
INFO:__main__:{"eval_acc": 0.7154712507409603, "eval_f1": 0.7143647281921619, "eval_mcc": 0.44003365617843615, "eval_auc": 0.7837481140338386, "eval_precision": 0.7224781436177422, "eval_recall": 0.7175827425349847, "learning_rate": 8.92951177311367e-05, "loss": 0.2779997900128365, "step": 2900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6926496739774748
INFO:__main__:  auc = 0.7719425196543078
INFO:__main__:  f1 = 0.6868542972712818
INFO:__main__:  mcc = 0.41194707726118024
INFO:__main__:  precision = 0.715715244353943
INFO:__main__:  recall = 0.6966717685765249
INFO:__main__:{"eval_acc": 0.6926496739774748, "eval_f1": 0.6868542972712818, "eval_mcc": 0.41194707726118024, "eval_auc": 0.7719425196543078, "eval_precision": 0.715715244353943, "eval_recall": 0.6966717685765249, "learning_rate": 8.854284209734447e-05, "loss": 0.21826387398876249, "step": 3000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7154712507409603
INFO:__main__:  auc = 0.7793782631917422
INFO:__main__:  f1 = 0.713875127071796
INFO:__main__:  mcc = 0.4425321554081675
INFO:__main__:  precision = 0.7246762832748384
INFO:__main__:  recall = 0.7179076332799232
INFO:__main__:{"eval_acc": 0.7154712507409603, "eval_f1": 0.713875127071796, "eval_mcc": 0.4425321554081675, "eval_auc": 0.7793782631917422, "eval_precision": 0.7246762832748384, "eval_recall": 0.7179076332799232, "learning_rate": 8.779056646355225e-05, "loss": 0.19537961464375259, "step": 3100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7033195020746889
INFO:__main__:  auc = 0.7395691259559928
INFO:__main__:  f1 = 0.7020411494097725
INFO:__main__:  mcc = 0.4062823589854857
INFO:__main__:  precision = 0.7041991160503652
INFO:__main__:  recall = 0.7020887240056638
INFO:__main__:{"eval_acc": 0.7033195020746889, "eval_f1": 0.7020411494097725, "eval_mcc": 0.4062823589854857, "eval_auc": 0.7395691259559928, "eval_precision": 0.7041991160503652, "eval_recall": 0.7020887240056638, "learning_rate": 8.703829082976003e-05, "loss": 0.1943344201333821, "step": 3200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6947243627741553
INFO:__main__:  auc = 0.7766214386401282
INFO:__main__:  f1 = 0.6852959660666387
INFO:__main__:  mcc = 0.4302135623451531
INFO:__main__:  precision = 0.7316850119412543
INFO:__main__:  recall = 0.6997148064034419
INFO:__main__:{"eval_acc": 0.6947243627741553, "eval_f1": 0.6852959660666387, "eval_mcc": 0.4302135623451531, "eval_auc": 0.7766214386401282, "eval_precision": 0.7316850119412543, "eval_recall": 0.6997148064034419, "learning_rate": 8.628601519596781e-05, "loss": 0.19187928922474384, "step": 3300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7122110254890338
INFO:__main__:  auc = 0.7718663953617979
INFO:__main__:  f1 = 0.709963652434159
INFO:__main__:  mcc = 0.43890012398138745
INFO:__main__:  precision = 0.7239992262852017
INFO:__main__:  recall = 0.7149932859428847
INFO:__main__:{"eval_acc": 0.7122110254890338, "eval_f1": 0.709963652434159, "eval_mcc": 0.43890012398138745, "eval_auc": 0.7718663953617979, "eval_precision": 0.7239992262852017, "eval_recall": 0.7149932859428847, "learning_rate": 8.553373956217559e-05, "loss": 0.17541177707724273, "step": 3400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7181387077652638
INFO:__main__:  auc = 0.7792339259073295
INFO:__main__:  f1 = 0.7160263186890748
INFO:__main__:  mcc = 0.4505801050017432
INFO:__main__:  precision = 0.7297896218519364
INFO:__main__:  recall = 0.720878590367974
INFO:__main__:{"eval_acc": 0.7181387077652638, "eval_f1": 0.7160263186890748, "eval_mcc": 0.4505801050017432, "eval_auc": 0.7792339259073295, "eval_precision": 0.7297896218519364, "eval_recall": 0.720878590367974, "learning_rate": 8.478146392838337e-05, "loss": 0.15810194300021976, "step": 3500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7027267338470657
INFO:__main__:  auc = 0.761708988608782
INFO:__main__:  f1 = 0.7024808283324397
INFO:__main__:  mcc = 0.40920389882013913
INFO:__main__:  precision = 0.7052505088305814
INFO:__main__:  recall = 0.7039554393356195
INFO:__main__:{"eval_acc": 0.7027267338470657, "eval_f1": 0.7024808283324397, "eval_mcc": 0.40920389882013913, "eval_auc": 0.761708988608782, "eval_precision": 0.7052505088305814, "eval_recall": 0.7039554393356195, "learning_rate": 8.402918829459115e-05, "loss": 0.16294292346574366, "step": 3600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7092471843509188
INFO:__main__:  auc = 0.7668015807130227
INFO:__main__:  f1 = 0.708583631472391
INFO:__main__:  mcc = 0.42495648641940736
INFO:__main__:  precision = 0.713991791562171
INFO:__main__:  recall = 0.7109754000744717
INFO:__main__:{"eval_acc": 0.7092471843509188, "eval_f1": 0.708583631472391, "eval_mcc": 0.42495648641940736, "eval_auc": 0.7668015807130227, "eval_precision": 0.713991791562171, "eval_recall": 0.7109754000744717, "learning_rate": 8.327691266079893e-05, "loss": 0.14540956924436613, "step": 3700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7024303497332542
INFO:__main__:  auc = 0.7756295373506568
INFO:__main__:  f1 = 0.7023022106734385
INFO:__main__:  mcc = 0.4046444265028557
INFO:__main__:  precision = 0.702277410445954
INFO:__main__:  recall = 0.7023670259803596
INFO:__main__:{"eval_acc": 0.7024303497332542, "eval_f1": 0.7023022106734385, "eval_mcc": 0.4046444265028557, "eval_auc": 0.7756295373506568, "eval_precision": 0.702277410445954, "eval_recall": 0.7023670259803596, "learning_rate": 8.25246370270067e-05, "loss": 0.15444379761815072, "step": 3800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7077652637818613
INFO:__main__:  auc = 0.773324535967058
INFO:__main__:  f1 = 0.7043999987204863
INFO:__main__:  mcc = 0.43456519495133106
INFO:__main__:  precision = 0.7237185085619138
INFO:__main__:  recall = 0.7110318340188035
INFO:__main__:{"eval_acc": 0.7077652637818613, "eval_f1": 0.7043999987204863, "eval_mcc": 0.43456519495133106, "eval_auc": 0.773324535967058, "eval_precision": 0.7237185085619138, "eval_recall": 0.7110318340188035, "learning_rate": 8.177236139321448e-05, "loss": 0.11467570160748437, "step": 3900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7110254890337878
INFO:__main__:  auc = 0.7675916559336688
INFO:__main__:  f1 = 0.7105892071719929
INFO:__main__:  mcc = 0.42140983916148844
INFO:__main__:  precision = 0.7109138951521985
INFO:__main__:  recall = 0.7104961510643513
INFO:__main__:{"eval_acc": 0.7110254890337878, "eval_f1": 0.7105892071719929, "eval_mcc": 0.42140983916148844, "eval_auc": 0.7675916559336688, "eval_precision": 0.7109138951521985, "eval_recall": 0.7104961510643513, "learning_rate": 8.102008575942226e-05, "loss": 0.12797512768302113, "step": 4000}
INFO:transformers.configuration_utils:Configuration saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-4000/config.json
INFO:transformers.modeling_utils:Model weights saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-4000/pytorch_model.bin
INFO:__main__:Saving model checkpoint to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-4000
INFO:__main__:Saving optimizer and scheduler states to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-4000
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6965026674570243
INFO:__main__:  auc = 0.7530227321553582
INFO:__main__:  f1 = 0.6957662341321836
INFO:__main__:  mcc = 0.3922793841891568
INFO:__main__:  precision = 0.6965877040074742
INFO:__main__:  recall = 0.6956927011747052
INFO:__main__:{"eval_acc": 0.6965026674570243, "eval_f1": 0.6957662341321836, "eval_mcc": 0.3922793841891568, "eval_auc": 0.7530227321553582, "eval_precision": 0.6965877040074742, "eval_recall": 0.6956927011747052, "learning_rate": 8.026781012563004e-05, "loss": 0.14881043631583452, "step": 4100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6962062833432128
INFO:__main__:  auc = 0.7511213829094107
INFO:__main__:  f1 = 0.6929586600644366
INFO:__main__:  mcc = 0.3942715888475556
INFO:__main__:  precision = 0.700326415313562
INFO:__main__:  recall = 0.6939959909044656
INFO:__main__:{"eval_acc": 0.6962062833432128, "eval_f1": 0.6929586600644366, "eval_mcc": 0.3942715888475556, "eval_auc": 0.7511213829094107, "eval_precision": 0.700326415313562, "eval_recall": 0.6939959909044656, "learning_rate": 7.951553449183782e-05, "loss": 0.14729683939367533, "step": 4200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7053941908713693
INFO:__main__:  auc = 0.7408032888507272
INFO:__main__:  f1 = 0.70371505102762
INFO:__main__:  mcc = 0.4221758272232773
INFO:__main__:  precision = 0.7143874233134397
INFO:__main__:  recall = 0.7078391847070691
INFO:__main__:{"eval_acc": 0.7053941908713693, "eval_f1": 0.70371505102762, "eval_mcc": 0.4221758272232773, "eval_auc": 0.7408032888507272, "eval_precision": 0.7143874233134397, "eval_recall": 0.7078391847070691, "learning_rate": 7.87632588580456e-05, "loss": 0.11152089276816696, "step": 4300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7083580320094843
INFO:__main__:  auc = 0.7767856420793993
INFO:__main__:  f1 = 0.7083248261817618
INFO:__main__:  mcc = 0.4185660315004455
INFO:__main__:  precision = 0.7094474548778353
INFO:__main__:  recall = 0.7091187057252852
INFO:__main__:{"eval_acc": 0.7083580320094843, "eval_f1": 0.7083248261817618, "eval_mcc": 0.4185660315004455, "eval_auc": 0.7767856420793993, "eval_precision": 0.7094474548778353, "eval_recall": 0.7091187057252852, "learning_rate": 7.801098322425338e-05, "loss": 0.11443780190777034, "step": 4400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7062833432128038
INFO:__main__:  auc = 0.7702700707059307
INFO:__main__:  f1 = 0.703634114702784
INFO:__main__:  mcc = 0.428355132087985
INFO:__main__:  precision = 0.7192402917986884
INFO:__main__:  recall = 0.709231749420629
INFO:__main__:{"eval_acc": 0.7062833432128038, "eval_f1": 0.703634114702784, "eval_mcc": 0.428355132087985, "eval_auc": 0.7702700707059307, "eval_precision": 0.7192402917986884, "eval_recall": 0.709231749420629, "learning_rate": 7.725870759046114e-05, "loss": 0.1260514414915815, "step": 4500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7050978067575578
INFO:__main__:  auc = 0.7764911658901286
INFO:__main__:  f1 = 0.7010417361455754
INFO:__main__:  mcc = 0.43183364639641564
INFO:__main__:  precision = 0.723471186440678
INFO:__main__:  recall = 0.7086178324935049
INFO:__main__:{"eval_acc": 0.7050978067575578, "eval_f1": 0.7010417361455754, "eval_mcc": 0.43183364639641564, "eval_auc": 0.7764911658901286, "eval_precision": 0.723471186440678, "eval_recall": 0.7086178324935049, "learning_rate": 7.650643195666892e-05, "loss": 0.12098478286061436, "step": 4600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7042086544161233
INFO:__main__:  auc = 0.7500002637100202
INFO:__main__:  f1 = 0.7027790331464403
INFO:__main__:  mcc = 0.4082150939104653
INFO:__main__:  precision = 0.7053446263864971
INFO:__main__:  recall = 0.7028779201929092
INFO:__main__:{"eval_acc": 0.7042086544161233, "eval_f1": 0.7027790331464403, "eval_mcc": 0.4082150939104653, "eval_auc": 0.7500002637100202, "eval_precision": 0.7053446263864971, "eval_recall": 0.7028779201929092, "learning_rate": 7.57541563228767e-05, "loss": 0.10299251689808443, "step": 4700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7080616478956728
INFO:__main__:  auc = 0.7715497675308268
INFO:__main__:  f1 = 0.7077566425240251
INFO:__main__:  mcc = 0.42036354164082296
INFO:__main__:  precision = 0.710979748880449
INFO:__main__:  recall = 0.7093868109125316
INFO:__main__:{"eval_acc": 0.7080616478956728, "eval_f1": 0.7077566425240251, "eval_mcc": 0.42036354164082296, "eval_auc": 0.7715497675308268, "eval_precision": 0.710979748880449, "eval_recall": 0.7093868109125316, "learning_rate": 7.500188068908448e-05, "loss": 0.1088804898399394, "step": 4800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7080616478956728
INFO:__main__:  auc = 0.7741420370298093
INFO:__main__:  f1 = 0.7070218782163316
INFO:__main__:  mcc = 0.42455506161404616
INFO:__main__:  precision = 0.7144791855112665
INFO:__main__:  recall = 0.7100984763538257
INFO:__main__:{"eval_acc": 0.7080616478956728, "eval_f1": 0.7070218782163316, "eval_mcc": 0.42455506161404616, "eval_auc": 0.7741420370298093, "eval_precision": 0.7144791855112665, "eval_recall": 0.7100984763538257, "learning_rate": 7.424960505529226e-05, "loss": 0.09736399532994255, "step": 4900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7024303497332542
INFO:__main__:  auc = 0.7760681750176599
INFO:__main__:  f1 = 0.6970898775410054
INFO:__main__:  mcc = 0.4313598806226433
INFO:__main__:  precision = 0.7254054967443129
INFO:__main__:  recall = 0.7063740118346025
INFO:__main__:{"eval_acc": 0.7024303497332542, "eval_f1": 0.6970898775410054, "eval_mcc": 0.4313598806226433, "eval_auc": 0.7760681750176599, "eval_precision": 0.7254054967443129, "eval_recall": 0.7063740118346025, "learning_rate": 7.349732942150004e-05, "loss": 0.10466936322278343, "step": 5000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7107291049199763
INFO:__main__:  auc = 0.7639456011937977
INFO:__main__:  f1 = 0.7098281962812459
INFO:__main__:  mcc = 0.42926829696828667
INFO:__main__:  precision = 0.7166193016480161
INFO:__main__:  recall = 0.7126671877576667
INFO:__main__:{"eval_acc": 0.7107291049199763, "eval_f1": 0.7098281962812459, "eval_mcc": 0.42926829696828667, "eval_auc": 0.7639456011937977, "eval_precision": 0.7166193016480161, "eval_recall": 0.7126671877576667, "learning_rate": 7.274505378770782e-05, "loss": 0.09952329711290077, "step": 5100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7033195020746889
INFO:__main__:  auc = 0.7393483127657098
INFO:__main__:  f1 = 0.7030095423010652
INFO:__main__:  mcc = 0.40607364430599485
INFO:__main__:  precision = 0.7031185778873819
INFO:__main__:  recall = 0.7029550993255
INFO:__main__:{"eval_acc": 0.7033195020746889, "eval_f1": 0.7030095423010652, "eval_mcc": 0.40607364430599485, "eval_auc": 0.7393483127657098, "eval_precision": 0.7031185778873819, "eval_recall": 0.7029550993255, "learning_rate": 7.19927781539156e-05, "loss": 0.08244432705454528, "step": 5200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7068761114404268
INFO:__main__:  auc = 0.7860242831218907
INFO:__main__:  f1 = 0.7046180391332062
INFO:__main__:  mcc = 0.42786354193041654
INFO:__main__:  precision = 0.7183121644145398
INFO:__main__:  recall = 0.7096392693052436
INFO:__main__:{"eval_acc": 0.7068761114404268, "eval_f1": 0.7046180391332062, "eval_mcc": 0.42786354193041654, "eval_auc": 0.7860242831218907, "eval_precision": 0.7183121644145398, "eval_recall": 0.7096392693052436, "learning_rate": 7.124050252012338e-05, "loss": 0.10580353624070994, "step": 5300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7101363366923533
INFO:__main__:  auc = 0.7746640070632091
INFO:__main__:  f1 = 0.7076363226542927
INFO:__main__:  mcc = 0.43573397746870524
INFO:__main__:  precision = 0.7228104395614499
INFO:__main__:  recall = 0.7130332172657631
INFO:__main__:{"eval_acc": 0.7101363366923533, "eval_f1": 0.7076363226542927, "eval_mcc": 0.43573397746870524, "eval_auc": 0.7746640070632091, "eval_precision": 0.7228104395614499, "eval_recall": 0.7130332172657631, "learning_rate": 7.048822688633115e-05, "loss": 0.08371525700669735, "step": 5400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7095435684647303
INFO:__main__:  auc = 0.7741608483445868
INFO:__main__:  f1 = 0.7091117285723132
INFO:__main__:  mcc = 0.4241830960538176
INFO:__main__:  precision = 0.7131562283246078
INFO:__main__:  recall = 0.711032185632164
INFO:__main__:{"eval_acc": 0.7095435684647303, "eval_f1": 0.7091117285723132, "eval_mcc": 0.4241830960538176, "eval_auc": 0.7741608483445868, "eval_precision": 0.7131562283246078, "eval_recall": 0.711032185632164, "learning_rate": 6.973595125253893e-05, "loss": 0.0914279403083492, "step": 5500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7131001778304683
INFO:__main__:  auc = 0.7747810943121967
INFO:__main__:  f1 = 0.7130900965575016
INFO:__main__:  mcc = 0.42675975913362524
INFO:__main__:  precision = 0.7133288793498824
INFO:__main__:  recall = 0.7134308919762886
INFO:__main__:{"eval_acc": 0.7131001778304683, "eval_f1": 0.7130900965575016, "eval_mcc": 0.42675975913362524, "eval_auc": 0.7747810943121967, "eval_precision": 0.7133288793498824, "eval_recall": 0.7134308919762886, "learning_rate": 6.898367561874671e-05, "loss": 0.06939282625186025, "step": 5600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7065797273266153
INFO:__main__:  auc = 0.7655150274276001
INFO:__main__:  f1 = 0.7061022156760266
INFO:__main__:  mcc = 0.41847275978914933
INFO:__main__:  precision = 0.7103660866323165
INFO:__main__:  recall = 0.7081127399014006
INFO:__main__:{"eval_acc": 0.7065797273266153, "eval_f1": 0.7061022156760266, "eval_mcc": 0.41847275978914933, "eval_auc": 0.7655150274276001, "eval_precision": 0.7103660866323165, "eval_recall": 0.7081127399014006, "learning_rate": 6.823139998495449e-05, "loss": 0.07463237363030202, "step": 5700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7056905749851808
INFO:__main__:  auc = 0.7705077613375091
INFO:__main__:  f1 = 0.7001410966156056
INFO:__main__:  mcc = 0.4392810360188459
INFO:__main__:  precision = 0.7300286159447118
INFO:__main__:  recall = 0.7097215468315593
INFO:__main__:{"eval_acc": 0.7056905749851808, "eval_f1": 0.7001410966156056, "eval_mcc": 0.4392810360188459, "eval_auc": 0.7705077613375091, "eval_precision": 0.7300286159447118, "eval_recall": 0.7097215468315593, "learning_rate": 6.747912435116227e-05, "loss": 0.09458486411138438, "step": 5800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.6825726141078838
INFO:__main__:  auc = 0.7457766840258183
INFO:__main__:  f1 = 0.6772070875635158
INFO:__main__:  mcc = 0.3692778072971662
INFO:__main__:  precision = 0.6897427785501253
INFO:__main__:  recall = 0.6796723174449804
INFO:__main__:{"eval_acc": 0.6825726141078838, "eval_f1": 0.6772070875635158, "eval_mcc": 0.3692778072971662, "eval_auc": 0.7457766840258183, "eval_precision": 0.6897427785501253, "eval_recall": 0.6796723174449804, "learning_rate": 6.672684871737005e-05, "loss": 0.08963117962121032, "step": 5900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7166567871962063
INFO:__main__:  auc = 0.7818668067494293
INFO:__main__:  f1 = 0.7164175430304462
INFO:__main__:  mcc = 0.4372087545601653
INFO:__main__:  precision = 0.7193083032976444
INFO:__main__:  recall = 0.7179027106928788
INFO:__main__:{"eval_acc": 0.7166567871962063, "eval_f1": 0.7164175430304462, "eval_mcc": 0.4372087545601653, "eval_auc": 0.7818668067494293, "eval_precision": 0.7193083032976444, "eval_recall": 0.7179027106928788, "learning_rate": 6.597457308357783e-05, "loss": 0.0672845299099572, "step": 6000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7166567871962063
INFO:__main__:  auc = 0.7839309529812067
INFO:__main__:  f1 = 0.7162091586074862
INFO:__main__:  mcc = 0.43866256774082946
INFO:__main__:  precision = 0.7204874417480817
INFO:__main__:  recall = 0.7181811884742547
INFO:__main__:{"eval_acc": 0.7166567871962063, "eval_f1": 0.7162091586074862, "eval_mcc": 0.43866256774082946, "eval_auc": 0.7839309529812067, "eval_precision": 0.7204874417480817, "eval_recall": 0.7181811884742547, "learning_rate": 6.522229744978561e-05, "loss": 0.07310909668565728, "step": 6100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7199170124481328
INFO:__main__:  auc = 0.7834568023648109
INFO:__main__:  f1 = 0.7198833262303288
INFO:__main__:  mcc = 0.44174591260719853
INFO:__main__:  precision = 0.7210527687461612
INFO:__main__:  recall = 0.7206932901270836
INFO:__main__:{"eval_acc": 0.7199170124481328, "eval_f1": 0.7198833262303288, "eval_mcc": 0.44174591260719853, "eval_auc": 0.7834568023648109, "eval_precision": 0.7210527687461612, "eval_recall": 0.7206932901270836, "learning_rate": 6.447002181599339e-05, "loss": 0.06982258412986994, "step": 6200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7083580320094843
INFO:__main__:  auc = 0.7415938914914137
INFO:__main__:  f1 = 0.707370525302632
INFO:__main__:  mcc = 0.4161999130064463
INFO:__main__:  precision = 0.7088787455298075
INFO:__main__:  recall = 0.7073240711341957
INFO:__main__:{"eval_acc": 0.7083580320094843, "eval_f1": 0.707370525302632, "eval_mcc": 0.4161999130064463, "eval_auc": 0.7415938914914137, "eval_precision": 0.7088787455298075, "eval_recall": 0.7073240711341957, "learning_rate": 6.371774618220117e-05, "loss": 0.07879797866975423, "step": 6300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7101363366923533
INFO:__main__:  auc = 0.7645331471188977
INFO:__main__:  f1 = 0.7096364079858672
INFO:__main__:  mcc = 0.4196109406977717
INFO:__main__:  precision = 0.7100745112457799
INFO:__main__:  recall = 0.7095367740107095
INFO:__main__:{"eval_acc": 0.7101363366923533, "eval_f1": 0.7096364079858672, "eval_mcc": 0.4196109406977717, "eval_auc": 0.7645331471188977, "eval_precision": 0.7100745112457799, "eval_recall": 0.7095367740107095, "learning_rate": 6.296547054840894e-05, "loss": 0.07228887928678887, "step": 6400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7104327208061648
INFO:__main__:  auc = 0.773274431063212
INFO:__main__:  f1 = 0.7092958109169347
INFO:__main__:  mcc = 0.42049125665640064
INFO:__main__:  precision = 0.711211534094135
INFO:__main__:  recall = 0.7092841398113172
INFO:__main__:{"eval_acc": 0.7104327208061648, "eval_f1": 0.7092958109169347, "eval_mcc": 0.42049125665640064, "eval_auc": 0.773274431063212, "eval_precision": 0.711211534094135, "eval_recall": 0.7092841398113172, "learning_rate": 6.221319491461672e-05, "loss": 0.05582214084104635, "step": 6500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7056905749851808
INFO:__main__:  auc = 0.7818842116107653
INFO:__main__:  f1 = 0.7053482689777393
INFO:__main__:  mcc = 0.4107870482002036
INFO:__main__:  precision = 0.7055057361538202
INFO:__main__:  recall = 0.7052813733173982
INFO:__main__:{"eval_acc": 0.7056905749851808, "eval_f1": 0.7053482689777393, "eval_mcc": 0.4107870482002036, "eval_auc": 0.7818842116107653, "eval_precision": 0.7055057361538202, "eval_recall": 0.7052813733173982, "learning_rate": 6.146091928082449e-05, "loss": 0.07452026093145832, "step": 6600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7098399525785418
INFO:__main__:  auc = 0.7810415701927509
INFO:__main__:  f1 = 0.7091273528227886
INFO:__main__:  mcc = 0.4264346106520848
INFO:__main__:  precision = 0.7148317584334958
INFO:__main__:  recall = 0.7116149847768996
INFO:__main__:{"eval_acc": 0.7098399525785418, "eval_f1": 0.7091273528227886, "eval_mcc": 0.4264346106520848, "eval_auc": 0.7810415701927509, "eval_precision": 0.7148317584334958, "eval_recall": 0.7116149847768996, "learning_rate": 6.070864364703227e-05, "loss": 0.06940211614128203, "step": 6700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7107291049199763
INFO:__main__:  auc = 0.7519156774903807
INFO:__main__:  f1 = 0.7102856722572708
INFO:__main__:  mcc = 0.4266518285209597
INFO:__main__:  precision = 0.7144234461684273
INFO:__main__:  recall = 0.7122340000977485
INFO:__main__:{"eval_acc": 0.7107291049199763, "eval_f1": 0.7102856722572708, "eval_mcc": 0.4266518285209597, "eval_auc": 0.7519156774903807, "eval_precision": 0.7144234461684273, "eval_recall": 0.7122340000977485, "learning_rate": 5.9956368013240046e-05, "loss": 0.050724066222319376, "step": 6800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7131001778304683
INFO:__main__:  auc = 0.7620180567525061
INFO:__main__:  f1 = 0.7120056660081484
INFO:__main__:  mcc = 0.435124757527114
INFO:__main__:  precision = 0.7199562258644763
INFO:__main__:  recall = 0.7151945845916696
INFO:__main__:{"eval_acc": 0.7131001778304683, "eval_f1": 0.7120056660081484, "eval_mcc": 0.435124757527114, "eval_auc": 0.7620180567525061, "eval_precision": 0.7199562258644763, "eval_recall": 0.7151945845916696, "learning_rate": 5.9204092379447825e-05, "loss": 0.05047683929442428, "step": 6900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7086544161232958
INFO:__main__:  auc = 0.7733676086036976
INFO:__main__:  f1 = 0.70723416230229
INFO:__main__:  mcc = 0.4276547893028224
INFO:__main__:  precision = 0.7167392548321465
INFO:__main__:  recall = 0.7109546548862127
INFO:__main__:{"eval_acc": 0.7086544161232958, "eval_f1": 0.70723416230229, "eval_mcc": 0.4276547893028224, "eval_auc": 0.7733676086036976, "eval_precision": 0.7167392548321465, "eval_recall": 0.7109546548862127, "learning_rate": 5.8451816745655604e-05, "loss": 0.05195616468554363, "step": 7000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7107291049199763
INFO:__main__:  auc = 0.7642991484276026
INFO:__main__:  f1 = 0.7086059804624962
INFO:__main__:  mcc = 0.4352480322792077
INFO:__main__:  precision = 0.7218892842717431
INFO:__main__:  recall = 0.7134407371503777
INFO:__main__:{"eval_acc": 0.7107291049199763, "eval_f1": 0.7086059804624962, "eval_mcc": 0.4352480322792077, "eval_auc": 0.7642991484276026, "eval_precision": 0.7218892842717431, "eval_recall": 0.7134407371503777, "learning_rate": 5.769954111186338e-05, "loss": 0.05684939685510471, "step": 7100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7151748666271488
INFO:__main__:  auc = 0.7641416256421778
INFO:__main__:  f1 = 0.7149939819723747
INFO:__main__:  mcc = 0.429989095632555
INFO:__main__:  precision = 0.7149849101075559
INFO:__main__:  recall = 0.7150041859570546
INFO:__main__:{"eval_acc": 0.7151748666271488, "eval_f1": 0.7149939819723747, "eval_mcc": 0.429989095632555, "eval_auc": 0.7641416256421778, "eval_precision": 0.7149849101075559, "eval_recall": 0.7150041859570546, "learning_rate": 5.694726547807116e-05, "loss": 0.06036561401531799, "step": 7200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7151748666271488
INFO:__main__:  auc = 0.7503815883992906
INFO:__main__:  f1 = 0.7151692370048941
INFO:__main__:  mcc = 0.4316727381471746
INFO:__main__:  precision = 0.7158950187300703
INFO:__main__:  recall = 0.7157777353497656
INFO:__main__:{"eval_acc": 0.7151748666271488, "eval_f1": 0.7151692370048941, "eval_mcc": 0.4316727381471746, "eval_auc": 0.7503815883992906, "eval_precision": 0.7158950187300703, "eval_recall": 0.7157777353497656, "learning_rate": 5.619498984427894e-05, "loss": 0.0501838380942354, "step": 7300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7122110254890338
INFO:__main__:  auc = 0.7470303614620505
INFO:__main__:  f1 = 0.7120835305196007
INFO:__main__:  mcc = 0.4242032425430711
INFO:__main__:  precision = 0.712056627911881
INFO:__main__:  recall = 0.7121466241777082
INFO:__main__:{"eval_acc": 0.7122110254890338, "eval_f1": 0.7120835305196007, "eval_mcc": 0.4242032425430711, "eval_auc": 0.7470303614620505, "eval_precision": 0.712056627911881, "eval_recall": 0.7121466241777082, "learning_rate": 5.544271421048672e-05, "loss": 0.04363692722574342, "step": 7400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7128037937166568
INFO:__main__:  auc = 0.77352249428892
INFO:__main__:  f1 = 0.7113309926587934
INFO:__main__:  mcc = 0.4364332199443414
INFO:__main__:  precision = 0.7213235655814787
INFO:__main__:  recall = 0.7151532700218317
INFO:__main__:{"eval_acc": 0.7128037937166568, "eval_f1": 0.7113309926587934, "eval_mcc": 0.4364332199443414, "eval_auc": 0.77352249428892, "eval_precision": 0.7213235655814787, "eval_recall": 0.7151532700218317, "learning_rate": 5.46904385766945e-05, "loss": 0.05782633156282827, "step": 7500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7199170124481328
INFO:__main__:  auc = 0.773939156120903
INFO:__main__:  f1 = 0.7198313415307642
INFO:__main__:  mcc = 0.4424020189669205
INFO:__main__:  precision = 0.7215390638225834
INFO:__main__:  recall = 0.72086347099348
INFO:__main__:{"eval_acc": 0.7199170124481328, "eval_f1": 0.7198313415307642, "eval_mcc": 0.4424020189669205, "eval_auc": 0.773939156120903, "eval_precision": 0.7215390638225834, "eval_recall": 0.72086347099348, "learning_rate": 5.393816294290228e-05, "loss": 0.04557345153880306, "step": 7600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7178423236514523
INFO:__main__:  auc = 0.7740921079326435
INFO:__main__:  f1 = 0.7161306104903549
INFO:__main__:  mcc = 0.4479968955344675
INFO:__main__:  precision = 0.7276993735859723
INFO:__main__:  recall = 0.7203576751746551
INFO:__main__:{"eval_acc": 0.7178423236514523, "eval_f1": 0.7161306104903549, "eval_mcc": 0.4479968955344675, "eval_auc": 0.7740921079326435, "eval_precision": 0.7276993735859723, "eval_recall": 0.7203576751746551, "learning_rate": 5.3185887309110064e-05, "loss": 0.036452946959470864, "step": 7700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7205097806757558
INFO:__main__:  auc = 0.7557287485764055
INFO:__main__:  f1 = 0.72028802838824
INFO:__main__:  mcc = 0.4448319089792557
INFO:__main__:  precision = 0.723098878954861
INFO:__main__:  recall = 0.7217351205137212
INFO:__main__:{"eval_acc": 0.7205097806757558, "eval_f1": 0.72028802838824, "eval_mcc": 0.4448319089792557, "eval_auc": 0.7557287485764055, "eval_precision": 0.723098878954861, "eval_recall": 0.7217351205137212, "learning_rate": 5.243361167531784e-05, "loss": 0.04566204566101078, "step": 7800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7157676348547718
INFO:__main__:  auc = 0.7662407574033072
INFO:__main__:  f1 = 0.7144290440461003
INFO:__main__:  mcc = 0.44184522688590594
INFO:__main__:  precision = 0.7238415157106843
INFO:__main__:  recall = 0.7180417737768865
INFO:__main__:{"eval_acc": 0.7157676348547718, "eval_f1": 0.7144290440461003, "eval_mcc": 0.44184522688590594, "eval_auc": 0.7662407574033072, "eval_precision": 0.7238415157106843, "eval_recall": 0.7180417737768865, "learning_rate": 5.168133604152562e-05, "loss": 0.04164687720069196, "step": 7900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7151748666271488
INFO:__main__:  auc = 0.7616673224255838
INFO:__main__:  f1 = 0.7130989698984392
INFO:__main__:  mcc = 0.4442503918517014
INFO:__main__:  precision = 0.7264512455744904
INFO:__main__:  recall = 0.7178817896979395
INFO:__main__:{"eval_acc": 0.7151748666271488, "eval_f1": 0.7130989698984392, "eval_mcc": 0.4442503918517014, "eval_auc": 0.7616673224255838, "eval_precision": 0.7264512455744904, "eval_recall": 0.7178817896979395, "learning_rate": 5.09290604077334e-05, "loss": 0.05882870614295825, "step": 8000}
INFO:transformers.configuration_utils:Configuration saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-8000/config.json
INFO:transformers.modeling_utils:Model weights saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-8000/pytorch_model.bin
INFO:__main__:Saving model checkpoint to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-8000
INFO:__main__:Saving optimizer and scheduler states to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-8000
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7131001778304683
INFO:__main__:  auc = 0.7232934709266735
INFO:__main__:  f1 = 0.7131001778304683
INFO:__main__:  mcc = 0.4271712037096616
INFO:__main__:  precision = 0.7135856018548308
INFO:__main__:  recall = 0.7135856018548308
INFO:__main__:{"eval_acc": 0.7131001778304683, "eval_f1": 0.7131001778304683, "eval_mcc": 0.4271712037096616, "eval_auc": 0.7232934709266735, "eval_precision": 0.7135856018548308, "eval_recall": 0.7135856018548308, "learning_rate": 5.017678477394118e-05, "loss": 0.02744151814520592, "step": 8100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7139893301719028
INFO:__main__:  auc = 0.7524230555693271
INFO:__main__:  f1 = 0.7137990386511195
INFO:__main__:  mcc = 0.43145309641498014
INFO:__main__:  precision = 0.7163063028667905
INFO:__main__:  recall = 0.7151483474347872
INFO:__main__:{"eval_acc": 0.7139893301719028, "eval_f1": 0.7137990386511195, "eval_mcc": 0.43145309641498014, "eval_auc": 0.7524230555693271, "eval_precision": 0.7163063028667905, "eval_recall": 0.7151483474347872, "learning_rate": 4.942450914014895e-05, "loss": 0.04746775772917317, "step": 8200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7059869590989923
INFO:__main__:  auc = 0.7541285561735745
INFO:__main__:  f1 = 0.7009472453259605
INFO:__main__:  mcc = 0.4378191519753951
INFO:__main__:  precision = 0.7283540802213002
INFO:__main__:  recall = 0.7098556873285226
INFO:__main__:{"eval_acc": 0.7059869590989923, "eval_f1": 0.7009472453259605, "eval_mcc": 0.4378191519753951, "eval_auc": 0.7541285561735745, "eval_precision": 0.7283540802213002, "eval_recall": 0.7098556873285226, "learning_rate": 4.867223350635673e-05, "loss": 0.05337152852676809, "step": 8300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7086544161232958
INFO:__main__:  auc = 0.7551225671432082
INFO:__main__:  f1 = 0.7082010000363358
INFO:__main__:  mcc = 0.4225203072797014
INFO:__main__:  precision = 0.71236037290737
INFO:__main__:  recall = 0.7101656345056475
INFO:__main__:{"eval_acc": 0.7086544161232958, "eval_f1": 0.7082010000363358, "eval_mcc": 0.4225203072797014, "eval_auc": 0.7551225671432082, "eval_precision": 0.71236037290737, "eval_recall": 0.7101656345056475, "learning_rate": 4.791995787256451e-05, "loss": 0.04543125706200954, "step": 8400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7133965619442798
INFO:__main__:  auc = 0.7442234320065906
INFO:__main__:  f1 = 0.7132145479368225
INFO:__main__:  mcc = 0.43019300169656904
INFO:__main__:  precision = 0.7156547420447541
INFO:__main__:  recall = 0.7145397047080677
INFO:__main__:{"eval_acc": 0.7133965619442798, "eval_f1": 0.7132145479368225, "eval_mcc": 0.43019300169656904, "eval_auc": 0.7442234320065906, "eval_precision": 0.7156547420447541, "eval_recall": 0.7145397047080677, "learning_rate": 4.716768223877229e-05, "loss": 0.036093726124963726, "step": 8500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7205097806757558
INFO:__main__:  auc = 0.7590087738081801
INFO:__main__:  f1 = 0.7205097561243424
INFO:__main__:  mcc = 0.44202288446450777
INFO:__main__:  precision = 0.7210149004340451
INFO:__main__:  recall = 0.7210079840845729
INFO:__main__:{"eval_acc": 0.7205097806757558, "eval_f1": 0.7205097561243424, "eval_mcc": 0.44202288446450777, "eval_auc": 0.7590087738081801, "eval_precision": 0.7210149004340451, "eval_recall": 0.7210079840845729, "learning_rate": 4.641540660498007e-05, "loss": 0.033916182240936905, "step": 8600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7193242442205098
INFO:__main__:  auc = 0.7672331861128193
INFO:__main__:  f1 = 0.718459407588766
INFO:__main__:  mcc = 0.44657673992364605
INFO:__main__:  precision = 0.7253348840940081
INFO:__main__:  recall = 0.7212604424772849
INFO:__main__:{"eval_acc": 0.7193242442205098, "eval_f1": 0.718459407588766, "eval_mcc": 0.44657673992364605, "eval_auc": 0.7672331861128193, "eval_precision": 0.7253348840940081, "eval_recall": 0.7212604424772849, "learning_rate": 4.566313097118785e-05, "loss": 0.03410277832808788, "step": 8700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7142857142857143
INFO:__main__:  auc = 0.7290697752100627
INFO:__main__:  f1 = 0.7142660359768682
INFO:__main__:  mcc = 0.4302228143784648
INFO:__main__:  precision = 0.7152343454362087
INFO:__main__:  recall = 0.7149885391625203
INFO:__main__:{"eval_acc": 0.7142857142857143, "eval_f1": 0.7142660359768682, "eval_mcc": 0.4302228143784648, "eval_auc": 0.7290697752100627, "eval_precision": 0.7152343454362087, "eval_recall": 0.7149885391625203, "learning_rate": 4.4910855337395626e-05, "loss": 0.04513020158265135, "step": 8800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7092471843509188
INFO:__main__:  auc = 0.7455117433588148
INFO:__main__:  f1 = 0.708583631472391
INFO:__main__:  mcc = 0.42495648641940736
INFO:__main__:  precision = 0.713991791562171
INFO:__main__:  recall = 0.7109754000744717
INFO:__main__:{"eval_acc": 0.7092471843509188, "eval_f1": 0.708583631472391, "eval_mcc": 0.42495648641940736, "eval_auc": 0.7455117433588148, "eval_precision": 0.713991791562171, "eval_recall": 0.7109754000744717, "learning_rate": 4.4158579703603405e-05, "loss": 0.04171247739199316, "step": 8900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7110254890337878
INFO:__main__:  auc = 0.7538200154498911
INFO:__main__:  f1 = 0.7088296921223503
INFO:__main__:  mcc = 0.43619845263354023
INFO:__main__:  precision = 0.7225098814229249
INFO:__main__:  recall = 0.7137760004894458
INFO:__main__:{"eval_acc": 0.7110254890337878, "eval_f1": 0.7088296921223503, "eval_mcc": 0.43619845263354023, "eval_auc": 0.7538200154498911, "eval_precision": 0.7225098814229249, "eval_recall": 0.7137760004894458, "learning_rate": 4.3406304069811184e-05, "loss": 0.03974421980208717, "step": 9000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7133965619442798
INFO:__main__:  auc = 0.7412647813861513
INFO:__main__:  f1 = 0.7133854587828719
INFO:__main__:  mcc = 0.4273337924875081
INFO:__main__:  precision = 0.713614063202879
INFO:__main__:  recall = 0.713719742351794
INFO:__main__:{"eval_acc": 0.7133965619442798, "eval_f1": 0.7133854587828719, "eval_mcc": 0.4273337924875081, "eval_auc": 0.7412647813861513, "eval_precision": 0.713614063202879, "eval_recall": 0.713719742351794, "learning_rate": 4.265402843601896e-05, "loss": 0.03717378568981076, "step": 9100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7178423236514523
INFO:__main__:  auc = 0.7718901292636198
INFO:__main__:  f1 = 0.7172685095695961
INFO:__main__:  mcc = 0.4418565023985446
INFO:__main__:  precision = 0.7223589367680682
INFO:__main__:  recall = 0.719506770842673
INFO:__main__:{"eval_acc": 0.7178423236514523, "eval_f1": 0.7172685095695961, "eval_mcc": 0.4418565023985446, "eval_auc": 0.7718901292636198, "eval_precision": 0.7223589367680682, "eval_recall": 0.719506770842673, "learning_rate": 4.190175280222674e-05, "loss": 0.04171362534572836, "step": 9200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7157676348547718
INFO:__main__:  auc = 0.764813031353715
INFO:__main__:  f1 = 0.7155607245159483
INFO:__main__:  mcc = 0.43516558897967
INFO:__main__:  precision = 0.718208578994421
INFO:__main__:  recall = 0.7169588046270912
INFO:__main__:{"eval_acc": 0.7157676348547718, "eval_f1": 0.7155607245159483, "eval_mcc": 0.43516558897967, "eval_auc": 0.764813031353715, "eval_precision": 0.718208578994421, "eval_recall": 0.7169588046270912, "learning_rate": 4.1149477168434514e-05, "loss": 0.02319401982909767, "step": 9300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7119146413752223
INFO:__main__:  auc = 0.7540719464225626
INFO:__main__:  f1 = 0.7115374872284193
INFO:__main__:  mcc = 0.42862092508361127
INFO:__main__:  precision = 0.715282323775827
INFO:__main__:  recall = 0.7133429886362078
INFO:__main__:{"eval_acc": 0.7119146413752223, "eval_f1": 0.7115374872284193, "eval_mcc": 0.42862092508361127, "eval_auc": 0.7540719464225626, "eval_precision": 0.715282323775827, "eval_recall": 0.7133429886362078, "learning_rate": 4.039720153464229e-05, "loss": 0.022433174805191813, "step": 9400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7119146413752223
INFO:__main__:  auc = 0.7584219311098007
INFO:__main__:  f1 = 0.7114458117546443
INFO:__main__:  mcc = 0.42920749872144665
INFO:__main__:  precision = 0.715762435540056
INFO:__main__:  recall = 0.7134512855511873
INFO:__main__:{"eval_acc": 0.7119146413752223, "eval_f1": 0.7114458117546443, "eval_mcc": 0.42920749872144665, "eval_auc": 0.7584219311098007, "eval_precision": 0.715762435540056, "eval_recall": 0.7134512855511873, "learning_rate": 3.964492590085007e-05, "loss": 0.03875598750732024, "step": 9500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7131001778304683
INFO:__main__:  auc = 0.768044358135085
INFO:__main__:  f1 = 0.7118300290284726
INFO:__main__:  mcc = 0.43602739965169907
INFO:__main__:  precision = 0.7207427874173844
INFO:__main__:  recall = 0.7153183524945035
INFO:__main__:{"eval_acc": 0.7131001778304683, "eval_f1": 0.7118300290284726, "eval_mcc": 0.43602739965169907, "eval_auc": 0.768044358135085, "eval_precision": 0.7207427874173844, "eval_recall": 0.7153183524945035, "learning_rate": 3.889265026705785e-05, "loss": 0.02276156066938711, "step": 9600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7104327208061648
INFO:__main__:  auc = 0.7684188263638292
INFO:__main__:  f1 = 0.7099404244160901
INFO:__main__:  mcc = 0.4263548092668838
INFO:__main__:  precision = 0.7143698799635909
INFO:__main__:  recall = 0.7119915626858058
INFO:__main__:{"eval_acc": 0.7104327208061648, "eval_f1": 0.7099404244160901, "eval_mcc": 0.4263548092668838, "eval_auc": 0.7684188263638292, "eval_precision": 0.7143698799635909, "eval_recall": 0.7119915626858058, "learning_rate": 3.814037463326563e-05, "loss": 0.024782468873017934, "step": 9700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7122110254890338
INFO:__main__:  auc = 0.7485357940642742
INFO:__main__:  f1 = 0.7117765335015438
INFO:__main__:  mcc = 0.429590613679095
INFO:__main__:  precision = 0.71588693957115
INFO:__main__:  recall = 0.7137091939509844
INFO:__main__:{"eval_acc": 0.7122110254890338, "eval_f1": 0.7117765335015438, "eval_mcc": 0.429590613679095, "eval_auc": 0.7485357940642742, "eval_precision": 0.71588693957115, "eval_recall": 0.7137091939509844, "learning_rate": 3.738809899947341e-05, "loss": 0.025700733195699287, "step": 9800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7110254890337878
INFO:__main__:  auc = 0.7570886132474552
INFO:__main__:  f1 = 0.7100768360500438
INFO:__main__:  mcc = 0.4301256851331202
INFO:__main__:  precision = 0.7171431643845437
INFO:__main__:  recall = 0.7130024510967348
INFO:__main__:{"eval_acc": 0.7110254890337878, "eval_f1": 0.7100768360500438, "eval_mcc": 0.4301256851331202, "eval_auc": 0.7570886132474552, "eval_precision": 0.7171431643845437, "eval_recall": 0.7130024510967348, "learning_rate": 3.663582336568119e-05, "loss": 0.031514392754761505, "step": 9900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7128037937166568
INFO:__main__:  auc = 0.7752728255966088
INFO:__main__:  f1 = 0.7111277633065075
INFO:__main__:  mcc = 0.43742662648090685
INFO:__main__:  precision = 0.7222044387537345
INFO:__main__:  recall = 0.7152770379246653
INFO:__main__:{"eval_acc": 0.7128037937166568, "eval_f1": 0.7111277633065075, "eval_mcc": 0.43742662648090685, "eval_auc": 0.7752728255966088, "eval_precision": 0.7222044387537345, "eval_recall": 0.7152770379246653, "learning_rate": 3.588354773188897e-05, "loss": 0.024659721776406514, "step": 10000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7104327208061648
INFO:__main__:  auc = 0.7799176380864778
INFO:__main__:  f1 = 0.7082925270931755
INFO:__main__:  mcc = 0.4347118467251618
INFO:__main__:  precision = 0.721642876990801
INFO:__main__:  recall = 0.7131518867748722
INFO:__main__:{"eval_acc": 0.7104327208061648, "eval_f1": 0.7082925270931755, "eval_mcc": 0.4347118467251618, "eval_auc": 0.7799176380864778, "eval_precision": 0.721642876990801, "eval_recall": 0.7131518867748722, "learning_rate": 3.5131272098096746e-05, "loss": 0.03455855121123022, "step": 10100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7089508002371073
INFO:__main__:  auc = 0.7471636229256131
INFO:__main__:  f1 = 0.707965300657708
INFO:__main__:  mcc = 0.4173906962317756
INFO:__main__:  precision = 0.7094763653238819
INFO:__main__:  recall = 0.7079172428730609
INFO:__main__:{"eval_acc": 0.7089508002371073, "eval_f1": 0.707965300657708, "eval_mcc": 0.4173906962317756, "eval_auc": 0.7471636229256131, "eval_precision": 0.7094763653238819, "eval_recall": 0.7079172428730609, "learning_rate": 3.4378996464304525e-05, "loss": 0.019835027991066453, "step": 10200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7151748666271488
INFO:__main__:  auc = 0.771221360652285
INFO:__main__:  f1 = 0.7145879654419136
INFO:__main__:  mcc = 0.43652951027930886
INFO:__main__:  precision = 0.719693569301358
INFO:__main__:  recall = 0.7168452335117068
INFO:__main__:{"eval_acc": 0.7151748666271488, "eval_f1": 0.7145879654419136, "eval_mcc": 0.43652951027930886, "eval_auc": 0.771221360652285, "eval_precision": 0.719693569301358, "eval_recall": 0.7168452335117068, "learning_rate": 3.3626720830512304e-05, "loss": 0.019272524928528583, "step": 10300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7133965619442798
INFO:__main__:  auc = 0.7602691318982586
INFO:__main__:  f1 = 0.7131187245836597
INFO:__main__:  mcc = 0.4309268465532069
INFO:__main__:  precision = 0.7162351864600774
INFO:__main__:  recall = 0.7146944145866099
INFO:__main__:{"eval_acc": 0.7133965619442798, "eval_f1": 0.7131187245836597, "eval_mcc": 0.4309268465532069, "eval_auc": 0.7602691318982586, "eval_precision": 0.7162351864600774, "eval_recall": 0.7146944145866099, "learning_rate": 3.2874445196720076e-05, "loss": 0.029058854757622612, "step": 10400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7125074096028453
INFO:__main__:  auc = 0.7501238558061738
INFO:__main__:  f1 = 0.7124992269548204
INFO:__main__:  mcc = 0.42640639540787506
INFO:__main__:  precision = 0.7132747504068259
INFO:__main__:  recall = 0.7131316690066536
INFO:__main__:{"eval_acc": 0.7125074096028453, "eval_f1": 0.7124992269548204, "eval_mcc": 0.42640639540787506, "eval_auc": 0.7501238558061738, "eval_precision": 0.7132747504068259, "eval_recall": 0.7131316690066536, "learning_rate": 3.2122169562927855e-05, "loss": 0.025455419732606968, "step": 10500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7169531713100178
INFO:__main__:  auc = 0.7578071351492758
INFO:__main__:  f1 = 0.716369934440195
INFO:__main__:  mcc = 0.44011183899115075
INFO:__main__:  precision = 0.7214964590547029
INFO:__main__:  recall = 0.7186247487283024
INFO:__main__:{"eval_acc": 0.7169531713100178, "eval_f1": 0.716369934440195, "eval_mcc": 0.44011183899115075, "eval_auc": 0.7578071351492758, "eval_precision": 0.7214964590547029, "eval_recall": 0.7186247487283024, "learning_rate": 3.1369893929135634e-05, "loss": 0.018043200363754296, "step": 10600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7196206283343213
INFO:__main__:  auc = 0.7566352078193185
INFO:__main__:  f1 = 0.7181947535094501
INFO:__main__:  mcc = 0.45020840087877223
INFO:__main__:  precision = 0.7282857311270008
INFO:__main__:  recall = 0.7219670095248543
INFO:__main__:{"eval_acc": 0.7196206283343213, "eval_f1": 0.7181947535094501, "eval_mcc": 0.45020840087877223, "eval_auc": 0.7566352078193185, "eval_precision": 0.7282857311270008, "eval_recall": 0.7219670095248543, "learning_rate": 3.061761829534341e-05, "loss": 0.01719102092058165, "step": 10700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7196206283343213
INFO:__main__:  auc = 0.753559821563252
INFO:__main__:  f1 = 0.7195638704389867
INFO:__main__:  mcc = 0.439330104206849
INFO:__main__:  precision = 0.7195909419445788
INFO:__main__:  recall = 0.7197391872738467
INFO:__main__:{"eval_acc": 0.7196206283343213, "eval_f1": 0.7195638704389867, "eval_mcc": 0.439330104206849, "eval_auc": 0.753559821563252, "eval_precision": 0.7195909419445788, "eval_recall": 0.7197391872738467, "learning_rate": 2.9865342661551192e-05, "loss": 0.01922114016728301, "step": 10800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7228808535862478
INFO:__main__:  auc = 0.7585569506401649
INFO:__main__:  f1 = 0.7227902431908879
INFO:__main__:  mcc = 0.4484066868738774
INFO:__main__:  precision = 0.7245624604930467
INFO:__main__:  recall = 0.7238448006756603
INFO:__main__:{"eval_acc": 0.7228808535862478, "eval_f1": 0.7227902431908879, "eval_mcc": 0.4484066868738774, "eval_auc": 0.7585569506401649, "eval_precision": 0.7245624604930467, "eval_recall": 0.7238448006756603, "learning_rate": 2.911306702775897e-05, "loss": 0.04082204659363924, "step": 10900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7199170124481328
INFO:__main__:  auc = 0.7463608896239952
INFO:__main__:  f1 = 0.7174857102756561
INFO:__main__:  mcc = 0.4558283849245097
INFO:__main__:  precision = 0.7331161808631167
INFO:__main__:  recall = 0.7228282864509659
INFO:__main__:{"eval_acc": 0.7199170124481328, "eval_f1": 0.7174857102756561, "eval_mcc": 0.4558283849245097, "eval_auc": 0.7463608896239952, "eval_precision": 0.7331161808631167, "eval_recall": 0.7228282864509659, "learning_rate": 2.836079139396675e-05, "loss": 0.022297936117538483, "step": 11000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7163604030823948
INFO:__main__:  auc = 0.7457072403871545
INFO:__main__:  f1 = 0.7163262891030948
INFO:__main__:  mcc = 0.4346220569349146
INFO:__main__:  precision = 0.7174879411482957
INFO:__main__:  recall = 0.7171342596938924
INFO:__main__:{"eval_acc": 0.7163604030823948, "eval_f1": 0.7163262891030948, "eval_mcc": 0.4346220569349146, "eval_auc": 0.7457072403871545, "eval_precision": 0.7174879411482957, "eval_recall": 0.7171342596938924, "learning_rate": 2.760851576017453e-05, "loss": 0.02118399265302287, "step": 11100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7128037937166568
INFO:__main__:  auc = 0.7507479695207475
INFO:__main__:  f1 = 0.7128035666614868
INFO:__main__:  mcc = 0.4265124985804774
INFO:__main__:  precision = 0.7132466895054228
INFO:__main__:  recall = 0.7132658095036168
INFO:__main__:{"eval_acc": 0.7128037937166568, "eval_f1": 0.7128035666614868, "eval_mcc": 0.4265124985804774, "eval_auc": 0.7507479695207475, "eval_precision": 0.7132466895054228, "eval_recall": 0.7132658095036168, "learning_rate": 2.6856240126382308e-05, "loss": 0.016969157393759815, "step": 11200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7172495554238293
INFO:__main__:  auc = 0.7662775009994609
INFO:__main__:  f1 = 0.7161708733179479
INFO:__main__:  mcc = 0.44352053554702947
INFO:__main__:  precision = 0.7242003044063448
INFO:__main__:  recall = 0.719346786763726
INFO:__main__:{"eval_acc": 0.7172495554238293, "eval_f1": 0.7161708733179479, "eval_mcc": 0.44352053554702947, "eval_auc": 0.7662775009994609, "eval_precision": 0.7242003044063448, "eval_recall": 0.719346786763726, "learning_rate": 2.6103964492590087e-05, "loss": 0.01943645637278678, "step": 11300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7175459395376408
INFO:__main__:  auc = 0.7594521582555477
INFO:__main__:  f1 = 0.7175457162315757
INFO:__main__:  mcc = 0.4361361257094653
INFO:__main__:  precision = 0.7180785298337413
INFO:__main__:  recall = 0.7180575963781011
INFO:__main__:{"eval_acc": 0.7175459395376408, "eval_f1": 0.7175457162315757, "eval_mcc": 0.4361361257094653, "eval_auc": 0.7594521582555477, "eval_precision": 0.7180785298337413, "eval_recall": 0.7180575963781011, "learning_rate": 2.5351688858797866e-05, "loss": 0.019269962274920546, "step": 11400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7190278601066983
INFO:__main__:  auc = 0.7642618774114084
INFO:__main__:  f1 = 0.7189843150374904
INFO:__main__:  mcc = 0.44010708369122825
INFO:__main__:  precision = 0.7202650768537572
INFO:__main__:  recall = 0.7198422099884214
INFO:__main__:{"eval_acc": 0.7190278601066983, "eval_f1": 0.7189843150374904, "eval_mcc": 0.44010708369122825, "eval_auc": 0.7642618774114084, "eval_precision": 0.7202650768537572, "eval_recall": 0.7198422099884214, "learning_rate": 2.4599413225005645e-05, "loss": 0.00825042179250886, "step": 11500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7175459395376408
INFO:__main__:  auc = 0.7607886406381361
INFO:__main__:  f1 = 0.717383055668231
INFO:__main__:  mcc = 0.438378211112509
INFO:__main__:  precision = 0.719718521847521
INFO:__main__:  recall = 0.7186609649044157
INFO:__main__:{"eval_acc": 0.7175459395376408, "eval_f1": 0.717383055668231, "eval_mcc": 0.438378211112509, "eval_auc": 0.7607886406381361, "eval_precision": 0.719718521847521, "eval_recall": 0.7186609649044157, "learning_rate": 2.3847137591213424e-05, "loss": 0.011213474064970797, "step": 11600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7163604030823948
INFO:__main__:  auc = 0.7601522204559511
INFO:__main__:  f1 = 0.7152039694995023
INFO:__main__:  mcc = 0.4421152009246833
INFO:__main__:  precision = 0.72363369808355
INFO:__main__:  recall = 0.718511177612918
INFO:__main__:{"eval_acc": 0.7163604030823948, "eval_f1": 0.7152039694995023, "eval_mcc": 0.4421152009246833, "eval_auc": 0.7601522204559511, "eval_precision": 0.72363369808355, "eval_recall": 0.718511177612918, "learning_rate": 2.30948619574212e-05, "loss": 0.010702069145881978, "step": 11700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7154712507409603
INFO:__main__:  auc = 0.7562083491998862
INFO:__main__:  f1 = 0.7144679649178112
INFO:__main__:  mcc = 0.43948395863822226
INFO:__main__:  precision = 0.7220015697488509
INFO:__main__:  recall = 0.7175053875957136
INFO:__main__:{"eval_acc": 0.7154712507409603, "eval_f1": 0.7144679649178112, "eval_mcc": 0.43948395863822226, "eval_auc": 0.7562083491998862, "eval_precision": 0.7220015697488509, "eval_recall": 0.7175053875957136, "learning_rate": 2.234258632362898e-05, "loss": 0.019268904832551927, "step": 11800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7131001778304683
INFO:__main__:  auc = 0.7509636843173058
INFO:__main__:  f1 = 0.7115918455291876
INFO:__main__:  mcc = 0.4372178538661035
INFO:__main__:  precision = 0.7217904289682504
INFO:__main__:  recall = 0.7154730623730456
INFO:__main__:{"eval_acc": 0.7131001778304683, "eval_f1": 0.7115918455291876, "eval_mcc": 0.4372178538661035, "eval_auc": 0.7509636843173058, "eval_precision": 0.7217904289682504, "eval_recall": 0.7154730623730456, "learning_rate": 2.1590310689836757e-05, "loss": 0.007763944795879069, "step": 11900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7151748666271488
INFO:__main__:  auc = 0.7470978712272327
INFO:__main__:  f1 = 0.7145248418399263
INFO:__main__:  mcc = 0.4369044281179402
INFO:__main__:  precision = 0.7200083168565421
INFO:__main__:  recall = 0.7169071174631236
INFO:__main__:{"eval_acc": 0.7151748666271488, "eval_f1": 0.7145248418399263, "eval_mcc": 0.4369044281179402, "eval_auc": 0.7470978712272327, "eval_precision": 0.7200083168565421, "eval_recall": 0.7169071174631236, "learning_rate": 2.0838035056044536e-05, "loss": 0.008424413230641222, "step": 12000}
INFO:transformers.configuration_utils:Configuration saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-12000/config.json
INFO:transformers.modeling_utils:Model weights saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-12000/pytorch_model.bin
INFO:__main__:Saving model checkpoint to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-12000
INFO:__main__:Saving optimizer and scheduler states to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/checkpoint-12000
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7163604030823948
INFO:__main__:  auc = 0.7641331869215301
INFO:__main__:  f1 = 0.7148814723615646
INFO:__main__:  mcc = 0.4437758325008189
INFO:__main__:  precision = 0.7250937183383992
INFO:__main__:  recall = 0.718727771442877
INFO:__main__:{"eval_acc": 0.7163604030823948, "eval_f1": 0.7148814723615646, "eval_mcc": 0.4437758325008189, "eval_auc": 0.7641331869215301, "eval_precision": 0.7250937183383992, "eval_recall": 0.718727771442877, "learning_rate": 2.0085759422252315e-05, "loss": 0.017020087879209313, "step": 12100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7116182572614108
INFO:__main__:  auc = 0.7711909460966171
INFO:__main__:  f1 = 0.708389993791888
INFO:__main__:  mcc = 0.44209449313754023
INFO:__main__:  precision = 0.7274245487515111
INFO:__main__:  recall = 0.7148487728517918
INFO:__main__:{"eval_acc": 0.7116182572614108, "eval_f1": 0.708389993791888, "eval_mcc": 0.44209449313754023, "eval_auc": 0.7711909460966171, "eval_precision": 0.7274245487515111, "eval_recall": 0.7148487728517918, "learning_rate": 1.9333483788460094e-05, "loss": 0.011362662528517831, "step": 12200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7193242442205098
INFO:__main__:  auc = 0.7623909427211288
INFO:__main__:  f1 = 0.7189746620737636
INFO:__main__:  mcc = 0.4433932127142694
INFO:__main__:  precision = 0.7226629779385685
INFO:__main__:  recall = 0.7207344288902414
INFO:__main__:{"eval_acc": 0.7193242442205098, "eval_f1": 0.7189746620737636, "eval_mcc": 0.4433932127142694, "eval_auc": 0.7623909427211288, "eval_precision": 0.7226629779385685, "eval_recall": 0.7207344288902414, "learning_rate": 1.858120815466787e-05, "loss": 0.014956103083095513, "step": 12300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7166567871962063
INFO:__main__:  auc = 0.7633121697251756
INFO:__main__:  f1 = 0.7164974024115718
INFO:__main__:  mcc = 0.43655968662103944
INFO:__main__:  precision = 0.7187974392644934
INFO:__main__:  recall = 0.7177634718021908
INFO:__main__:{"eval_acc": 0.7166567871962063, "eval_f1": 0.7164974024115718, "eval_mcc": 0.43655968662103944, "eval_auc": 0.7633121697251756, "eval_precision": 0.7187974392644934, "eval_recall": 0.7177634718021908, "learning_rate": 1.782893252087565e-05, "loss": 0.007884365064064695, "step": 12400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7128037937166568
INFO:__main__:  auc = 0.7558475938921947
INFO:__main__:  f1 = 0.7126381751757773
INFO:__main__:  mcc = 0.4288645399044856
INFO:__main__:  precision = 0.7149501968665293
INFO:__main__:  recall = 0.713915590993494
INFO:__main__:{"eval_acc": 0.7128037937166568, "eval_f1": 0.7126381751757773, "eval_mcc": 0.4288645399044856, "eval_auc": 0.7558475938921947, "eval_precision": 0.7149501968665293, "eval_recall": 0.713915590993494, "learning_rate": 1.7076656887083428e-05, "loss": 0.008149152665682778, "step": 12500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7148784825133373
INFO:__main__:  auc = 0.7579217611047411
INFO:__main__:  f1 = 0.7141866379249616
INFO:__main__:  mcc = 0.4365464954335116
INFO:__main__:  precision = 0.7199094604351595
INFO:__main__:  recall = 0.7166492090633266
INFO:__main__:{"eval_acc": 0.7148784825133373, "eval_f1": 0.7141866379249616, "eval_mcc": 0.4365464954335116, "eval_auc": 0.7579217611047411, "eval_precision": 0.7199094604351595, "eval_recall": 0.7166492090633266, "learning_rate": 1.6324381253291207e-05, "loss": 0.0075734721932713, "step": 12600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7172495554238293
INFO:__main__:  auc = 0.7529900321128482
INFO:__main__:  f1 = 0.7160201267059282
INFO:__main__:  mcc = 0.44431890943192615
INFO:__main__:  precision = 0.7248971520384202
INFO:__main__:  recall = 0.7194550836787056
INFO:__main__:{"eval_acc": 0.7172495554238293, "eval_f1": 0.7160201267059282, "eval_mcc": 0.44431890943192615, "eval_auc": 0.7529900321128482, "eval_precision": 0.7248971520384202, "eval_recall": 0.7194550836787056, "learning_rate": 1.5572105619498986e-05, "loss": 0.003972637771294103, "step": 12700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7187314759928868
INFO:__main__:  auc = 0.7534082762049525
INFO:__main__:  f1 = 0.7183811555522721
INFO:__main__:  mcc = 0.44220169798632664
INFO:__main__:  precision = 0.7220646236787969
INFO:__main__:  recall = 0.7201412571513762
INFO:__main__:{"eval_acc": 0.7187314759928868, "eval_f1": 0.7183811555522721, "eval_mcc": 0.44220169798632664, "eval_auc": 0.7534082762049525, "eval_precision": 0.7220646236787969, "eval_recall": 0.7201412571513762, "learning_rate": 1.4819829985706763e-05, "loss": 0.0032170213211611554, "step": 12800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7169531713100178
INFO:__main__:  auc = 0.7683117600956108
INFO:__main__:  f1 = 0.7154031465636214
INFO:__main__:  mcc = 0.44535397236837476
INFO:__main__:  precision = 0.7260365491355448
INFO:__main__:  recall = 0.7193673561453049
INFO:__main__:{"eval_acc": 0.7169531713100178, "eval_f1": 0.7154031465636214, "eval_mcc": 0.44535397236837476, "eval_auc": 0.7683117600956108, "eval_precision": 0.7260365491355448, "eval_recall": 0.7193673561453049, "learning_rate": 1.4067554351914542e-05, "loss": 0.015013547668586398, "step": 12900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7205097806757558
INFO:__main__:  auc = 0.763479186071329
INFO:__main__:  f1 = 0.7200482142403059
INFO:__main__:  mcc = 0.44654655880499383
INFO:__main__:  precision = 0.7244931764732647
INFO:__main__:  recall = 0.7220600112586598
INFO:__main__:{"eval_acc": 0.7205097806757558, "eval_f1": 0.7200482142403059, "eval_mcc": 0.44654655880499383, "eval_auc": 0.763479186071329, "eval_precision": 0.7244931764732647, "eval_recall": 0.7220600112586598, "learning_rate": 1.3315278718122321e-05, "loss": 0.008339845589589459, "step": 13000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7157676348547718
INFO:__main__:  auc = 0.7656053920612033
INFO:__main__:  f1 = 0.7150183984476941
INFO:__main__:  mcc = 0.438682511960033
INFO:__main__:  precision = 0.7211034413765507
INFO:__main__:  recall = 0.7175931151291142
INFO:__main__:{"eval_acc": 0.7157676348547718, "eval_f1": 0.7150183984476941, "eval_mcc": 0.438682511960033, "eval_auc": 0.7656053920612033, "eval_precision": 0.7211034413765507, "eval_recall": 0.7175931151291142, "learning_rate": 1.25630030843301e-05, "loss": 0.0026098827934856674, "step": 13100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7199170124481328
INFO:__main__:  auc = 0.7679107450581621
INFO:__main__:  f1 = 0.7196350436015109
INFO:__main__:  mcc = 0.4441016046120902
INFO:__main__:  precision = 0.7228698398394995
INFO:__main__:  recall = 0.7212347747019814
INFO:__main__:{"eval_acc": 0.7199170124481328, "eval_f1": 0.7196350436015109, "eval_mcc": 0.4441016046120902, "eval_auc": 0.7679107450581621, "eval_precision": 0.7228698398394995, "eval_recall": 0.7212347747019814, "learning_rate": 1.1810727450537877e-05, "loss": 0.00522668005748983, "step": 13200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7172495554238293
INFO:__main__:  auc = 0.7689037011877148
INFO:__main__:  f1 = 0.7161499486409608
INFO:__main__:  mcc = 0.4436325012792043
INFO:__main__:  precision = 0.7242976962041062
INFO:__main__:  recall = 0.7193622577515802
INFO:__main__:{"eval_acc": 0.7172495554238293, "eval_f1": 0.7161499486409608, "eval_mcc": 0.4436325012792043, "eval_auc": 0.7689037011877148, "eval_precision": 0.7242976962041062, "eval_recall": 0.7193622577515802, "learning_rate": 1.1058451816745656e-05, "loss": 0.0163207595090239, "step": 13300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7181387077652638
INFO:__main__:  auc = 0.7643835356340802
INFO:__main__:  f1 = 0.7179335234772335
INFO:__main__:  mcc = 0.4399246109433656
INFO:__main__:  precision = 0.7205949336290697
INFO:__main__:  recall = 0.7193314915825519
INFO:__main__:{"eval_acc": 0.7181387077652638, "eval_f1": 0.7179335234772335, "eval_mcc": 0.4399246109433656, "eval_auc": 0.7643835356340802, "eval_precision": 0.7205949336290697, "eval_recall": 0.7193314915825519, "learning_rate": 1.0306176182953435e-05, "loss": 0.006845485133271723, "step": 13400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7178423236514523
INFO:__main__:  auc = 0.7644364534448087
INFO:__main__:  f1 = 0.7171071520795835
INFO:__main__:  mcc = 0.4428182258856947
INFO:__main__:  precision = 0.7231706493700418
INFO:__main__:  recall = 0.7196614807212152
INFO:__main__:{"eval_acc": 0.7178423236514523, "eval_f1": 0.7171071520795835, "eval_mcc": 0.4428182258856947, "eval_auc": 0.7644364534448087, "eval_precision": 0.7231706493700418, "eval_recall": 0.7196614807212152, "learning_rate": 9.553900549161213e-06, "loss": 0.002887151309350884, "step": 13500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7148784825133373
INFO:__main__:  auc = 0.7585834974488692
INFO:__main__:  f1 = 0.7148299850464858
INFO:__main__:  mcc = 0.4299032129676037
INFO:__main__:  precision = 0.7148784825133372
INFO:__main__:  recall = 0.7150247553386335
INFO:__main__:{"eval_acc": 0.7148784825133373, "eval_f1": 0.7148299850464858, "eval_mcc": 0.4299032129676037, "eval_auc": 0.7585834974488692, "eval_precision": 0.7148784825133372, "eval_recall": 0.7150247553386335, "learning_rate": 8.801624915368992e-06, "loss": 0.0028313918138928784, "step": 13600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7169531713100178
INFO:__main__:  auc = 0.7613037542110095
INFO:__main__:  f1 = 0.7169350444125864
INFO:__main__:  mcc = 0.435537969268497
INFO:__main__:  precision = 0.7178879577377533
INFO:__main__:  recall = 0.7176500764934866
INFO:__main__:{"eval_acc": 0.7169531713100178, "eval_f1": 0.7169350444125864, "eval_mcc": 0.435537969268497, "eval_auc": 0.7613037542110095, "eval_precision": 0.7178879577377533, "eval_recall": 0.7176500764934866, "learning_rate": 8.04934928157677e-06, "loss": 0.002287394046074951, "step": 13700}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7199170124481328
INFO:__main__:  auc = 0.7662442735369104
INFO:__main__:  f1 = 0.7192125449624251
INFO:__main__:  mcc = 0.4468539708381272
INFO:__main__:  precision = 0.7251528243947725
INFO:__main__:  recall = 0.7217143753254621
INFO:__main__:{"eval_acc": 0.7199170124481328, "eval_f1": 0.7192125449624251, "eval_mcc": 0.4468539708381272, "eval_auc": 0.7662442735369104, "eval_precision": 0.7251528243947725, "eval_recall": 0.7217143753254621, "learning_rate": 7.297073647784548e-06, "loss": 0.013666207007659067, "step": 13800}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7139893301719028
INFO:__main__:  auc = 0.763376866583475
INFO:__main__:  f1 = 0.7135030804109797
INFO:__main__:  mcc = 0.4335126872611473
INFO:__main__:  precision = 0.717968838889521
INFO:__main__:  recall = 0.7155505931189968
INFO:__main__:{"eval_acc": 0.7139893301719028, "eval_f1": 0.7135030804109797, "eval_mcc": 0.4335126872611473, "eval_auc": 0.763376866583475, "eval_precision": 0.717968838889521, "eval_recall": 0.7155505931189968, "learning_rate": 6.544798013992327e-06, "loss": 0.008022609462368564, "step": 13900}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7178423236514523
INFO:__main__:  auc = 0.7607566438223466
INFO:__main__:  f1 = 0.7177700299447498
INFO:__main__:  mcc = 0.4380883641152826
INFO:__main__:  precision = 0.7193400708300941
INFO:__main__:  recall = 0.7187486924378164
INFO:__main__:{"eval_acc": 0.7178423236514523, "eval_f1": 0.7177700299447498, "eval_mcc": 0.4380883641152826, "eval_auc": 0.7607566438223466, "eval_precision": 0.7193400708300941, "eval_recall": 0.7187486924378164, "learning_rate": 5.792522380200106e-06, "loss": 0.0009970581451079852, "step": 14000}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7160640189685833
INFO:__main__:  auc = 0.7616827934134378
INFO:__main__:  f1 = 0.7157280030113222
INFO:__main__:  mcc = 0.43671822500549157
INFO:__main__:  precision = 0.719273258215503
INFO:__main__:  recall = 0.7174487778447015
INFO:__main__:{"eval_acc": 0.7160640189685833, "eval_f1": 0.7157280030113222, "eval_mcc": 0.43671822500549157, "eval_auc": 0.7616827934134378, "eval_precision": 0.719273258215503, "eval_recall": 0.7174487778447015, "learning_rate": 5.040246746407884e-06, "loss": 0.003380355196700293, "step": 14100}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7166567871962063
INFO:__main__:  auc = 0.7588858849387472
INFO:__main__:  f1 = 0.7164725820288875
INFO:__main__:  mcc = 0.4367703277377796
INFO:__main__:  precision = 0.7189619623982306
INFO:__main__:  recall = 0.7178098847657535
INFO:__main__:{"eval_acc": 0.7166567871962063, "eval_f1": 0.7164725820288875, "eval_mcc": 0.4367703277377796, "eval_auc": 0.7588858849387472, "eval_precision": 0.7189619623982306, "eval_recall": 0.7178098847657535, "learning_rate": 4.287971112615662e-06, "loss": 0.0018017872876498586, "step": 14200}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7160640189685833
INFO:__main__:  auc = 0.7635131167606002
INFO:__main__:  f1 = 0.7157619003399293
INFO:__main__:  mcc = 0.43647925123895615
INFO:__main__:  precision = 0.7190801108192639
INFO:__main__:  recall = 0.7174023648811388
INFO:__main__:{"eval_acc": 0.7160640189685833, "eval_f1": 0.7157619003399293, "eval_mcc": 0.43647925123895615, "eval_auc": 0.7635131167606002, "eval_precision": 0.7190801108192639, "eval_recall": 0.7174023648811388, "learning_rate": 3.535695478823441e-06, "loss": 0.006125638145383618, "step": 14300}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7154712507409603
INFO:__main__:  auc = 0.7640451077747691
INFO:__main__:  f1 = 0.7143647281921619
INFO:__main__:  mcc = 0.44003365617843615
INFO:__main__:  precision = 0.7224781436177422
INFO:__main__:  recall = 0.7175827425349847
INFO:__main__:{"eval_acc": 0.7154712507409603, "eval_f1": 0.7143647281921619, "eval_mcc": 0.44003365617843615, "eval_auc": 0.7640451077747691, "eval_precision": 0.7224781436177422, "eval_recall": 0.7175827425349847, "learning_rate": 2.7834198450312197e-06, "loss": 0.002415885248167342, "step": 14400}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7157676348547718
INFO:__main__:  auc = 0.7616787498597942
INFO:__main__:  f1 = 0.715578526493703
INFO:__main__:  mcc = 0.43502169157023907
INFO:__main__:  precision = 0.7180953956578177
INFO:__main__:  recall = 0.7169278626513828
INFO:__main__:{"eval_acc": 0.7157676348547718, "eval_f1": 0.715578526493703, "eval_mcc": 0.43502169157023907, "eval_auc": 0.7616787498597942, "eval_precision": 0.7180953956578177, "eval_recall": 0.7169278626513828, "learning_rate": 2.031144211238998e-06, "loss": 0.008398461333404156, "step": 14500}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7160640189685833
INFO:__main__:  auc = 0.7665376948861001
INFO:__main__:  f1 = 0.7153068630214205
INFO:__main__:  mcc = 0.43933018604009483
INFO:__main__:  precision = 0.7214470893657012
INFO:__main__:  recall = 0.717897436492474
INFO:__main__:{"eval_acc": 0.7160640189685833, "eval_f1": 0.7153068630214205, "eval_mcc": 0.43933018604009483, "eval_auc": 0.7665376948861001, "eval_precision": 0.7214470893657012, "eval_recall": 0.717897436492474, "learning_rate": 1.2788685774467766e-06, "loss": 0.005782094954699914, "step": 14600}
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7178423236514523
INFO:__main__:  auc = 0.7642360338294247
INFO:__main__:  f1 = 0.7173831407308864
INFO:__main__:  mcc = 0.4411349864239992
INFO:__main__:  precision = 0.7217583787708779
INFO:__main__:  recall = 0.7193830029398394
INFO:__main__:{"eval_acc": 0.7178423236514523, "eval_f1": 0.7173831407308864, "eval_mcc": 0.4411349864239992, "eval_auc": 0.7642360338294247, "eval_precision": 0.7217583787708779, "eval_recall": 0.7193830029398394, "learning_rate": 5.265929436545551e-07, "loss": 0.000496941131048061, "step": 14700}
INFO:__main__: global_step = 14770, average loss = 0.1383414374253713
INFO:__main__:Saving model checkpoint to /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/
INFO:transformers.configuration_utils:Configuration saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/config.json
INFO:transformers.modeling_utils:Model weights saved in /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/pytorch_model.bin
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForSequenceClassification_textCNN"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "filter_num": 128,
  "filter_size": [
    2,
    3,
    4,
    5,
    6
  ],
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 0,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/pytorch_model.bin
INFO:transformers.tokenization_utils:Model name '/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/' not found in model shortcut name list (dna3, dna4, dna5, dna6). Assuming '/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/' is a path, a model identifier, or url to a directory containing tokenizer files.
INFO:transformers.tokenization_utils:Didn't find file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/added_tokens.json. We won't load it.
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/vocab.txt
INFO:transformers.tokenization_utils:loading file None
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/special_tokens_map.json
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/tokenizer_config.json
INFO:transformers.tokenization_utils:Model name '/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/' not found in model shortcut name list (dna3, dna4, dna5, dna6). Assuming '/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/' is a path, a model identifier, or url to a directory containing tokenizer files.
INFO:transformers.tokenization_utils:Didn't find file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/added_tokens.json. We won't load it.
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/vocab.txt
INFO:transformers.tokenization_utils:loading file None
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/special_tokens_map.json
INFO:transformers.tokenization_utils:loading file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/tokenizer_config.json
INFO:__main__:Evaluate the following checkpoints: ['/data3/linming/DNABERT/examples/output/fold_100_textCNN/1/']
INFO:transformers.configuration_utils:loading configuration file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/config.json
INFO:transformers.configuration_utils:Model config BertConfig {
  "architectures": [
    "BertForSequenceClassification_textCNN"
  ],
  "attention_probs_dropout_prob": 0.1,
  "bos_token_id": 0,
  "do_sample": false,
  "eos_token_ids": 0,
  "filter_num": 128,
  "filter_size": [
    2,
    3,
    4,
    5,
    6
  ],
  "finetuning_task": "dnaprom",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1"
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "is_decoder": false,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1
  },
  "layer_norm_eps": 1e-12,
  "length_penalty": 1.0,
  "max_length": 20,
  "max_position_embeddings": 512,
  "model_type": "bert",
  "num_attention_heads": 12,
  "num_beams": 1,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "num_return_sequences": 1,
  "num_rnn_layer": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "output_past": true,
  "pad_token_id": 0,
  "pruned_heads": {},
  "repetition_penalty": 1.0,
  "rnn": "lstm",
  "rnn_dropout": 0.0,
  "rnn_hidden": 768,
  "split": 0,
  "temperature": 1.0,
  "top_k": 50,
  "top_p": 1.0,
  "torchscript": false,
  "type_vocab_size": 2,
  "use_bfloat16": false,
  "vocab_size": 4101
}

INFO:transformers.modeling_utils:loading weights file /data3/linming/DNABERT/examples/output/fold_100_textCNN/1/pytorch_model.bin
INFO:__main__:Loading features from cached file /data3/linming/DNABERT/examples/data/fold_100/1/after/cached_dev_6-new-12w-0_300_dnaprom
INFO:__main__:***** Running evaluation  *****
INFO:__main__:  Num examples = 3374
INFO:__main__:  Batch size = 32
INFO:__main__:***** Eval results  *****
INFO:__main__:  acc = 0.7169531713100178
INFO:__main__:  auc = 0.7644603631533109
INFO:__main__:  f1 = 0.7164857312826004
INFO:__main__:  mcc = 0.4393896070259878
INFO:__main__:  precision = 0.7208951488834099
INFO:__main__:  recall = 0.7185009808254685
